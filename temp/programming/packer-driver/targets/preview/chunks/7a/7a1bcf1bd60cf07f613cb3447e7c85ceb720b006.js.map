{"version":3,"sources":["file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Script/UIFrame/UIMgr.ts"],"names":["UIManager","director","instantiate","js","NodePool","warn","Widget","ResMgr","PriorityStake","UIScreen","ndScreen","ndWin","allForms","createMap","screensStack","loadingForms","winArr","winMasks","screenMasks","waitNodePool","maskNodePool","getInstance","instance","on","onWinSizeChged","uiscreens","getElements","k","length","console","log","node","getComponent","updateAlignment","init","checkFormShowing","prefabPath","com","active","checkFormLoading","getMaskNode","size","maskNode","get","openScreen","undefined","pb","getPrefabByPath","error","isOnleyEngross","getSize","getTopElement","closeSelf","isEngross","mask","fid","params","onShow","showEffect","all","push","closeForm","path","split","formType","FormType","FormType_Screen","exitToScreen","FormType_Fixed","FormType_Popup","FormType_Float","FormType_Win","exitToWin","FormType_Loading","FormType_Bubble","destory","off"],"mappings":";;;mKAQaA,S;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AARJC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,E,OAAAA,E;AAAIC,MAAAA,Q,OAAAA,Q;AAAoCC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,M,OAAAA,M;;AACrEC,MAAAA,M,iBAAAA,M;;AACAC,MAAAA,a,iBAAAA,a;;AAIWC,MAAAA,Q,iBAAAA,Q;;;;;;;;;2BAEPT,S,GAAN,MAAMA,SAAN,CAAgB;AAAA;AAAA,eAEXU,QAFW,GAEa,IAFb;AAAA,eAIXC,KAJW,GAIU,IAJV;AAAA,eAOXC,QAPW,GAO2BT,EAAE,CAACU,SAAH,EAP3B;AAAA,eASXC,YATW,GAS6B;AAAA;AAAA,+CAT7B;AAAA,eAUXC,YAVW,GAUgCZ,EAAE,CAACU,SAAH,EAVhC;AAAA,eAWXG,MAXW,GAWU,EAXV;AAAA,eAcXC,QAdW,GAcyBd,EAAE,CAACU,SAAH,EAdzB;AAAA,eAgBXK,WAhBW,GAgB4Bf,EAAE,CAACU,SAAH,EAhB5B;AAAA,eAyDXM,YAzDW,GAyDc,IAAIf,QAAJ,EAzDd;AAAA,eA0DXgB,YA1DW,GA0Dc,IAAIhB,QAAJ,EA1Dd;AAAA;;AAoBM,eAAXiB,WAAW,GAAc;AACnC,cAAI,KAAKC,QAAL,IAAiB,IAArB,EAA2B;AACvB,iBAAKA,QAAL,GAAgB,IAAItB,SAAJ,EAAhB;AACAC,YAAAA,QAAQ,CAACsB,EAAT,CAAY,gBAAZ,EAA8B,KAAKD,QAAL,CAAcE,cAA5C,EAA4D,KAAKF,QAAjE;AACH;;AACD,iBAAO,KAAKA,QAAZ;AACH;;AAEDE,QAAAA,cAAc,GAAG;AAEb,cAAIC,SAAS,GAAG,KAAKX,YAAL,CAAkBY,WAAlB,EAAhB;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvCE,YAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAL,YAAAA,SAAS,CAACE,CAAD,CAAT,CAAaI,IAAb,CAAkBC,YAAlB,CAA+B1B,MAA/B,EAAwC2B,eAAxC;AACH;AACJ,SAnCkB,CAqCnB;;;AACOC,QAAAA,IAAI,CAACxB,QAAD,EACPC,KADO,EACY;AACnB,eAAKD,QAAL,GAAgBA,QAAhB;AACA,eAAKC,KAAL,GAAaA,KAAb;AACH,SA1CkB,CA4CnB;;;AACOwB,QAAAA,gBAAgB,CAACC,UAAD,EAA8B;AACjD,cAAIC,GAAG,GAAG,KAAKzB,QAAL,CAAcwB,UAAd,CAAV;;AACA,cAAI,CAACC,GAAL,EAAU;AACN,mBAAO,KAAP;AACH;;AACD,iBAAOA,GAAG,CAACN,IAAJ,CAASO,MAAhB;AACH;;AACMC,QAAAA,gBAAgB,CAACH,UAAD,EAAqB;AACxC,cAAIC,GAAG,GAAG,KAAKtB,YAAL,CAAkBqB,UAAlB,CAAV;AACA,iBAAO,CAAC,CAACC,GAAT;AACH;;AAIOG,QAAAA,WAAW,GAAgB;AAC/B,cAAI,KAAKpB,YAAL,CAAkBqB,IAAlB,KAA2B,CAA/B,EAAkC;AAC9B,gBAAIC,QAAQ,GAAG,KAAKtB,YAAL,CAAkBuB,GAAlB,EAAf;AACA,mBAAOD,QAAP;AACH;;AACD,iBAAO,IAAP;AACH,SAjEkB,CAmEnB;;;AACaE,QAAAA,UAAU,CAACR,UAAD,EAA+D;AAAA;AAAA;;AAAA;AAClFP,YAAAA,OAAO,CAACC,GAAR,6BAA4BM,UAA5B;;AACA,gBAAIA,UAAU,IAAI,IAAd,IAAsBA,UAAU,IAAIS,SAApC,IAAiDT,UAAU,CAACR,MAAX,IAAqB,CAA1E,EAA6E;AACzEvB,cAAAA,IAAI,CAAI+B,UAAJ,oCAAJ;AACA,qBAAO,IAAP;AACH,aALiF,CAMlF;;;AACA,gBAAI,KAAI,CAACD,gBAAL,CAAsBC,UAAtB,CAAJ,EAAuC;AACnC/B,cAAAA,IAAI,CAAI+B,UAAJ,gDAAJ;AACA,qBAAO,IAAP;AACH;;AACD,gBAAI,KAAI,CAACG,gBAAL,CAAsBH,UAAtB,CAAJ,EAAuC;AACnC/B,cAAAA,IAAI,CAAI+B,UAAJ,oCAAJ;AACA,qBAAO,IAAP;AACH;;AACD,YAAA,KAAI,CAACrB,YAAL,CAAkBqB,UAAlB,IAAgC,IAAhC;AACA,gBAAIU,EAAE,GAAG;AAAA;AAAA,kCAAOzB,WAAP,GAAqB0B,eAArB,CAAqCX,UAArC,CAAT;;AAEA,gBAAIU,EAAE,IAAI,IAAV,EAAgB;AACZjB,cAAAA,OAAO,CAACmB,KAAR,CAAc,eAAd,EADY,CAEZ;AACH;;AAED,gBAAIF,EAAE,IAAI,IAAV,EAAgB;AACZzC,cAAAA,IAAI,CAAI+B,UAAJ,2CAAJ;AACA,qBAAO,KAAI,CAACrB,YAAL,CAAkBqB,UAAlB,CAAP;AACA,qBAAO,IAAP;AACH;;AACD,gBAAIL,IAAI,GAAG7B,WAAW,CAAC4C,EAAD,CAAtB;AACA,gBAAIT,GAAG,GAAGN,IAAI,CAACC,YAAL;AAAA;AAAA,qCAAV;;AACA,gBAAIK,GAAG,IAAI,IAAX,EAAiB;AACbhC,cAAAA,IAAI,CAAI+B,UAAJ,kDAAJ;AACA,qBAAO,KAAI,CAACrB,YAAL,CAAkBqB,UAAlB,CAAP;AACA,qBAAO,IAAP;AACH;;AAED,gBAAIC,GAAG,CAACY,cAAR,EAAwB;AACpB;AACApB,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B,KAAI,CAAChB,YAAL,CAAkBoC,OAAlB,EAA5B,EAAyD,YAAzD;;AACA,qBAAO,KAAI,CAACpC,YAAL,CAAkBoC,OAAlB,KAA8B,CAArC,EAAwC;AACpC,sBAAM,KAAI,CAACpC,YAAL,CAAkBqC,aAAlB,GAAmCC,SAAnC,EAAN;AACH;AACJ,aAND,MAMO,IAAIf,GAAG,CAACgB,SAAR,EAAmB;AACtB,qBAAO,KAAI,CAACvC,YAAL,CAAkBoC,OAAlB,KAA8B,CAArC,EAAwC;AACpC,sBAAM,KAAI,CAACpC,YAAL,CAAkBqC,aAAlB,GAAmCC,SAAnC,EAAN;AACH;AACJ,aA9CiF,CAgDlF;;;AACAvB,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AACA,gBAAIY,QAAQ,GAAG,KAAI,CAACF,WAAL,EAAf;;AACA,gBAAIE,QAAQ,IAAI,IAAhB,EAAsB;AAClB,kBAAIY,IAAI,GAAG;AAAA;AAAA,oCAAOjC,WAAP,GAAqB0B,eAArB,CAAqC,sBAArC,CAAX;;AACA,kBAAIO,IAAI,IAAI,IAAZ,EAAkB;AACdZ,gBAAAA,QAAQ,GAAGxC,WAAW,CAACoD,IAAD,CAAtB;AACH;AACJ;;AACD,gBAAIZ,QAAQ,IAAI,IAAhB,EAAsB;AAClB;AACA;AACA;AACA,cAAA,KAAI,CAACxB,WAAL,CAAiBkB,UAAjB,IAA+BM,QAA/B;AACH;;AAED,YAAA,KAAI,CAAC9B,QAAL,CAAcwB,UAAd,IAA4BC,GAA5B;AACAA,YAAAA,GAAG,CAACkB,GAAJ,GAAUnB,UAAV,CAjEkF,CAkElF;;AAlEkF,+CAAvCoB,MAAuC;AAAvCA,cAAAA,MAAuC;AAAA;;AAoElFnB,YAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAGD,MAAd;AACA,kBAAMnB,GAAG,CAACqB,UAAJ,EAAN;;AACA,gBAAI,CAACrB,GAAG,CAACgB,SAAT,EAAoB;AAChB;AACA,kBAAIM,GAAG,GAAG,KAAI,CAAC7C,YAAL,CAAkBY,WAAlB,EAAV;;AACA,mBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgC,GAAG,CAAC/B,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjCgC,gBAAAA,GAAG,CAAChC,CAAD,CAAH,CAAOI,IAAP,CAAYO,MAAZ,GAAqB,KAArB;AACH;AACJ,aA5EiF,CA6ElF;;;AACA,YAAA,KAAI,CAACxB,YAAL,CAAkB8C,IAAlB,CAAuBvB,GAAvB;;AACAR,YAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuB,KAAI,CAAChB,YAAL,CAAkBoC,OAAlB,EAAnC;AACA,mBAAO,KAAI,CAACnC,YAAL,CAAkBqB,UAAlB,CAAP;AACA,mBAAOC,GAAP;AAjFkF;AAkFrF,SAtJkB,CAwJnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACJ;AACA;AACA;;;AACiBwB,QAAAA,SAAS,CAACzB,UAAD,EAAuC;AAAA;;AAAA;AACzDP,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BM,UAA3B;;AACA,gBAAI,CAACA,UAAD,IAAeA,UAAU,CAACR,MAAX,IAAqB,CAAxC,EAA2C;AACvCvB,cAAAA,IAAI,MAAI+B,UAAJ,EAAkB,MAAlB,CAAJ;AACA,qBAAO,KAAP;AACH;;AACD,gBAAI0B,IAAI,GAAG1B,UAAU,CAAC2B,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAX;AACA,gBAAI1B,GAAG,GAAG,MAAI,CAACzB,QAAL,CAAcwB,UAAd,CAAV;;AACA,gBAAI,CAACC,GAAD,IAAQyB,IAAI,CAAClC,MAAL,IAAeQ,UAAU,CAACR,MAAtC,EAA8C;AAC1CC,cAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,qBAAO,KAAP;AACH,aAXwD,CAYzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,gBAAI,CAACO,GAAL,EAAU;AACNR,cAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,qBAAO,KAAP;AACH;;AACD,oBAAQO,GAAG,CAAC2B,QAAZ;AACI,mBAAKC,QAAQ,CAACC,eAAd;AACI,sBAAM,MAAI,CAACC,YAAL,CAAkB/B,UAAlB,CAAN;AACA;;AACJ,mBAAK6B,QAAQ,CAACG,cAAd;AACI;AACA;;AACJ,mBAAKH,QAAQ,CAACI,cAAd;AACI;AACA;;AACJ,mBAAKJ,QAAQ,CAACK,cAAd;AACI;AACA;;AACJ,mBAAKL,QAAQ,CAACM,YAAd;AACI,sBAAM,MAAI,CAACC,SAAL,CAAepC,UAAf,CAAN;AACA;;AACJ,mBAAK6B,QAAQ,CAACQ,gBAAd;AACI;AACA;;AACJ,mBAAKR,QAAQ,CAACS,eAAd;AACI;AACA;AArBR;;AAuBA,mBAAO,IAAP;AA/CyD;AAgD5D;AAED;AACJ;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACJ;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEqB,eAAPC,OAAO,GAAG;AACpB,eAAKrD,QAAL,GAAgB,IAAhB;AACArB,UAAAA,QAAQ,CAAC2E,GAAT,CAAa,gBAAb;AACH;;AA/WkB,O;;AAAV5E,MAAAA,S,CAmBMsB,Q","sourcesContent":["import { director, instantiate, js, NodePool, Size, Tween, tween, view, warn, Widget } from \"cc\";\nimport { ResMgr } from \"../Base/ResMgr\";\nimport { PriorityStake } from \"../Utils/PriorityStake\";\n\n// import { ModalMgr } from \"./ModalMgr\";\nimport { UIBase } from \"./UIBase\";\nimport { UILoading, UIScreen, UIWindow } from \"./UIFrom\";\n\nexport class UIManager {\n    //全屏显示的ui挂载节点\n    private ndScreen: Node | null = null;\n    //能够拦截float的win\n    private ndWin: Node | null = null;\n\n    //所有显示的窗体\n    private allForms: { [key: string]: UIBase } = js.createMap();\n    //存储screen\n    private screensStack: PriorityStake<UIScreen> = new PriorityStake<UIScreen>();\n    private loadingForms: { [key: string]: boolean } = js.createMap();\n    private winArr: UIWindow[] = [];\n\n    //win类型的masks\n    private winMasks: { [key: string]: Node } = js.createMap();\n    //screen类型的masks\n    private screenMasks: { [key: string]: Node } = js.createMap();\n\n\n    private static instance: UIManager;\n    public static getInstance(): UIManager {\n        if (this.instance == null) {\n            this.instance = new UIManager();\n            director.on(\"winsizechanged\", this.instance.onWinSizeChged, this.instance);\n        }\n        return this.instance;\n    }\n\n    onWinSizeChged() {\n\n        let uiscreens = this.screensStack.getElements();\n        for (let k = 0; k < uiscreens.length; k++) {\n            console.log(\"窗口变化，要重新刷新一下======\");\n            uiscreens[k].node.getComponent(Widget)!.updateAlignment();\n        }\n    }\n\n    //初始化\n    public init(ndScreen: Node,\n        ndWin: Node): void {\n        this.ndScreen = ndScreen;\n        this.ndWin = ndWin;\n    }\n\n    //判断一个界面是否正在显示\n    public checkFormShowing(prefabPath: string): boolean {\n        let com = this.allForms[prefabPath];\n        if (!com) {\n            return false;\n        }\n        return com.node.active;\n    }\n    public checkFormLoading(prefabPath: string) {\n        let com = this.loadingForms[prefabPath];\n        return !!com;\n    }\n\n    private waitNodePool: NodePool = new NodePool();\n    private maskNodePool: NodePool = new NodePool();\n    private getMaskNode(): Node | null {\n        if (this.maskNodePool.size() > 0) {\n            let maskNode = this.maskNodePool.get();\n            return maskNode\n        }\n        return null;\n    }\n\n    //打开一个screen\n    public async openScreen(prefabPath: string, ...params: any): Promise<UIScreen | null> {\n        console.log(`打开openScene--${prefabPath}`);\n        if (prefabPath == null || prefabPath == undefined || prefabPath.length <= 0) {\n            warn(`${prefabPath}，参数错误`);\n            return null;\n        }\n        //当前窗体正在显示\n        if (this.checkFormShowing(prefabPath)) {\n            warn(`${prefabPath}窗体正在显示中`);\n            return null;\n        }\n        if (this.checkFormLoading(prefabPath)) {\n            warn(`${prefabPath}正在加载中`);\n            return null;\n        }\n        this.loadingForms[prefabPath] = true;\n        let pb = ResMgr.getInstance().getPrefabByPath(prefabPath);\n\n        if (pb == null) {\n            console.error(\"兼容模式 需要 去健在窗体\")\n            // pb = await ResMgr.getInstance().loadForm(prefabPath)!;\n        }\n\n        if (pb == null) {\n            warn(`${prefabPath}窗体加载错误!`);\n            delete this.loadingForms[prefabPath];\n            return null;\n        }\n        let node = instantiate(pb!);\n        let com = node.getComponent(UIScreen);\n        if (com == null) {\n            warn(`${prefabPath}没有绑定UIScreen组件`);\n            delete this.loadingForms[prefabPath];\n            return null;\n        }\n\n        if (com.isOnleyEngross) {\n            //关闭掉所有的screen\n            console.log(\"关闭所有的screeen\", this.screensStack.getSize(), \"==========\");\n            while (this.screensStack.getSize() > 0) {\n                await this.screensStack.getTopElement()!.closeSelf();\n            }\n        } else if (com.isEngross) {\n            while (this.screensStack.getSize() > 0) {\n                await this.screensStack.getTopElement()!.closeSelf();\n            }\n        }\n\n        //给screen增加屏蔽层\n        console.log(\"需要加屏蔽层========\");\n        let maskNode = this.getMaskNode();\n        if (maskNode == null) {\n            let mask = ResMgr.getInstance().getPrefabByPath(\"Lobby/Prefabs/UIMask\");\n            if (mask != null) {\n                maskNode = instantiate(mask!);\n            }\n        }\n        if (maskNode != null) {\n            //在首次加载的时候会有问题。这个地方需要优化一下\n            // this.ndScreen!.addChild(maskNode!);\n            // maskNode!.setContentSize(new Size(screen.width, screen.height));\n            this.screenMasks[prefabPath] = maskNode!;\n        }\n\n        this.allForms[prefabPath] = com;\n        com.fid = prefabPath;\n        // this.ndScreen!.addChild(node);\n\n        com.onShow(...params);\n        await com.showEffect();\n        if (!com.isEngross) {\n            //不独占 将其他screen active 设置为false\n            let all = this.screensStack.getElements();\n            for (let k = 0; k < all.length; k++) {\n                all[k].node.active = false;\n            }\n        }\n        //将对象保存到stack中\n        this.screensStack.push(com);\n        console.log('保存场景的堆栈数量 : !!!!!!' + this.screensStack.getSize());\n        delete this.loadingForms[prefabPath]\n        return com\n    }\n\n    //打开一个窗口\n    // public async openWin(prefabPath: string, ...params: any): Promise<UIWindow | null> {\n    //     console.log(`打开openWin--${prefabPath}`);\n    //     if (prefabPath == null || prefabPath == undefined || prefabPath.length <= 0) {\n    //         warn(`${prefabPath}Win节点不存在`);\n    //         return null;\n    //     }\n    //     if (this.checkFormShowing(prefabPath)) {\n    //         warn(`${prefabPath}win节点正在显示中`);\n    //         return null;\n    //     }\n    //     if (this.checkFormLoading(prefabPath)) {\n    //         warn(`${prefabPath}win节点正在打开...`)\n    //         return null;\n    //     }\n    //     this.loadingForms[prefabPath] = true;\n    //     let pb = ResMgr.getInstance().getPrefabByPath(prefabPath);\n    //     //await this.waitFormsecond();\n    //     //兼容一下，暂时这么写。捕鱼的结构需要调整一下  这里要干掉否则 隐藏bug\n    //     if (pb == null) {\n    //         console.error(`${prefabPath}不存在使用了兼容模式`);\n    //         pb = await ResMgr.getInstance().loadForm(prefabPath);\n    //     }\n    //     if (pb == null) {\n    //         console.error(`${prefabPath}win节点加载失败`);\n    //         //如果加载失败了，则需要将节点从\n    //         delete this.loadingForms[prefabPath];\n    //         return null;\n    //     }\n    //     let node = instantiate(pb);\n    //     let com = node.getComponent(UIWindow);\n    //     if (com == null) {\n    //         warn(`${prefabPath}win加载没有绑定到UIWindow组件上`);\n    //         delete this.loadingForms[prefabPath];\n    //         return null;\n    //     }\n    //     if (com.modalType.opacity >= ModalOpacity.OpacityZero) {\n    //         console.log(\"开始获取屏蔽层的东西\");\n    //         let maskNode = this.getMaskNode();\n    //         if (maskNode == null) {\n    //             //有屏蔽层\n    //             let mask = ResMgr.getInstance().getPrefabByPath(\"Lobby/Prefabs/UIMask\");\n    //             maskNode = instantiate(mask!);\n    //         }\n    //         this.ndWin!.addChild(maskNode);\n    //         maskNode.setContentSize(new Size(view.getFrameSize().width, view.getFrameSize().height));\n    //         this.winMasks[prefabPath] = maskNode;\n    //     }\n    //     com.fid = prefabPath;\n    //     this.ndWin!.addChild(node);\n    //     this.winArr.push(com);\n    //     this.allForms[prefabPath] = com;\n    //     com.onShow(...params);\n    //     if (com.modalType.opacity >= ModalOpacity.OpacityZero) {\n    //         let arr: UIBase[] = this.getModelTypeComs();\n    //         ModalMgr.getInstance().checkModalWinAndPopUp(arr, this.winMasks, true);\n    //     }\n    //     delete this.loadingForms[prefabPath];\n    //     com.showEffect();\n\n    //     return com;\n    // }\n\n    /**\n     * 关闭一个UIForm\n     * @prefabPath\n     */\n    public async closeForm(prefabPath: string): Promise<boolean> {\n        console.log(\"closeForm关闭\", prefabPath);\n        if (!prefabPath || prefabPath.length <= 0) {\n            warn(`${prefabPath}`, \"参数错误\");\n            return false;\n        }\n        let path = prefabPath.split(\"_\")[0];\n        let com = this.allForms[prefabPath];\n        if (!com && path.length == prefabPath.length) {\n            console.log(\"closeForm中的com不存在\");\n            return false;\n        }\n        // if(com == null && path.length != prefabPath.length){\n        //     for(let i = 0;i<this.bubbleMap.get(path).length;i++){\n        //         if(this.bubbleMap.get(path)[i].fid == prefabPath){\n        //             com = this.bubbleMap.get(path)[i];\n        //             break;\n        //         }\n        //     }\n        // }\n        if (!com) {\n            console.log(\"closeForm中的com不存在\");\n            return false;\n        }\n        switch (com.formType) {\n            case FormType.FormType_Screen:\n                await this.exitToScreen(prefabPath);\n                break;\n            case FormType.FormType_Fixed:\n                // await this.exitToFixed(prefabPath);\n                break;\n            case FormType.FormType_Popup:\n                // await this.exitToPopup(prefabPath);\n                break;\n            case FormType.FormType_Float:\n                // await this.exitToFloat(prefabPath);\n                break;\n            case FormType.FormType_Win:\n                await this.exitToWin(prefabPath);\n                break;\n            case FormType.FormType_Loading:\n                // await this.exitToLoading(prefabPath);\n                break;\n            case FormType.FormType_Bubble:\n                // await this.exitToBubble(prefabPath);\n                break;\n        }\n        return true;\n    }\n\n    /**\n     * screen退出\n     * @param prefabPath \n     * @returns \n     */\n    // private async exitToScreen(prefabPath: string) {\n    //     console.log(`${prefabPath}exitToScreen`);\n    //     let com = this.allForms[prefabPath];\n    //     if (!com) {\n    //         return false;\n    //     }\n    //     //screen的退出必须是按照栈退出\n    //     let tcom = this.screensStack.pop();\n    //     if (tcom != com) {\n    //         warn(`${prefabPath}screen没有按顺序退出`);\n    //         return;\n    //     }\n    //     let nextCom = this.screensStack.getTopElement();\n    //     if (nextCom != null) {\n    //         nextCom.node.active = true;\n    //         //界面重新被激活\n    //         nextCom.reShow();\n    //     }\n    //     com.onHide();\n    //     //如果不是独占 （这里其实不用判断是否是独占，只要判定还有screen就显示出来就可以了）\n    //     await com.hideEffect();\n    //     //节点需要从父节点移除\n    //     com.node.destroy();\n    //     //com.node.removeFromParent();\n    //     ResMgr.getInstance().destoryForm(prefabPath);\n    //     delete this.allForms[prefabPath];\n    //     console.log(prefabPath, \"exittoscreen 成功\");\n    //     let maskNode = this.screenMasks[prefabPath];\n    //     if (maskNode != null && maskNode != undefined) {\n    //         if (!this.reBackMaskNode(maskNode)) {\n    //             maskNode.destroy();\n    //             ResMgr.getInstance().destoryForm(\"Lobby/Prefabs/UIMask\");\n    //         }\n    //         delete this.screenMasks[prefabPath];\n    //     }\n    // }\n\n    /**\n     * @description:退出窗口 \n     * @param {string} prefabPath\n     */\n    // private async exitToWin(prefabPath: string) {\n    //     let com: UIWindow | null = null;\n    //     let tIdx: number = -1;\n    //     if (this.winArr.length > 0) {\n    //         for (let k = 0; k < this.winArr.length; k++) {\n    //             if (this.winArr[k].fid == prefabPath) {\n    //                 tIdx = k;\n    //                 com = this.winArr[k];\n    //                 break;\n    //             }\n    //         }\n    //     }\n    //     if (tIdx >= 0 && tIdx < this.winArr.length) {\n    //         this.winArr.splice(tIdx, 1);\n    //         com!.onHide();\n    //         let maskPath = com!.fid;\n    //         let maskNode = this.winMasks[maskPath];\n    //         if (maskNode) {\n    //             let t = com!.getHideEffectTime();\n    //             //消失要有消失动画\n    //             Tween.stopAllByTarget(maskNode);\n    //             tween(maskNode)\n    //                 .to(t, { opacity: 0 }, { easing: 'linear' })\n    //                 // 当前面的动作都执行完毕后才会调用这个回调函数\n    //                 .call(() => {\n    //                     if (!this.reBackMaskNode(maskNode)) {\n    //                         maskNode.destroy();\n    //                         ResMgr.getInstance().destoryForm(\"Lobby/Prefabs/UIMask\");\n    //                     }\n    //                 })\n    //                 .start()\n    //         }\n    //         delete this.winMasks[maskPath];\n    //         let arr: UIBase[] = this.getModelTypeComs();\n    //         ModalMgr.getInstance().checkModalWinAndPopUp(arr, this.winMasks, false);\n    //         await com!.hideEffect();\n    //         com!.node.destroy();\n    //         ResMgr.getInstance().destoryForm(prefabPath);\n    //     }\n    //     delete this.allForms[prefabPath];\n    // }\n    // private reBackMaskNode(node: Node): boolean {\n    //     if (this.maskNodePool.size() >= 10) {\n    //         return false;\n    //     }\n    //     this.maskNodePool.put(node);\n    //     return true;\n    // }\n\n    public static destory() {\n        this.instance = null!;\n        director.off(\"winsizechanged\")\n    }\n}"]}
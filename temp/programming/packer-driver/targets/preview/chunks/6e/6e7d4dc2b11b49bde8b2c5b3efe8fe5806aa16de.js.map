{"version":3,"sources":["file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Battle/Script/UIBattle.ts"],"names":["_decorator","Node","Button","Component","EventMgr","LogicEvent","UIScreen","Config","FireKit","GameEngine","GameEvent","HumanPlayer","PlayerManager","ccclass","property","UIBattle","type","_engine","cards","chairIds","_meChair","_meId","_meColor","_locked","fromIndex","INVALID_INDEX","_iconMapping","isEngross","sitDownLogic","sitDownVO","chair","userId","onShow","init","eventRegister","enter","inst","create","use","HUMAN_FIRE","onGroup","SIT_DOWN","START_GAME","startGameLogic","startGameVo","index","btnCards","length","clickEventHandler","EventHandler","target","node","component","handler","customEventData","String","button","addComponent","clickEvents","push","callback","event","console","log","onBtnBackLobby","closeSelf","Instance","emit","ENTER_HALL_FROM_GAMES"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,S,OAAAA,S;;AAC5BC,MAAAA,Q;;AACEC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,Q,iBAAAA,Q;;AACFC,MAAAA,M;;AACAC,MAAAA,O;;AACAC,MAAAA,U;;AACAC,MAAAA,S;;AACAC,MAAAA,W;;AACAC,MAAAA,a;;;;;;;;;OAID;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBd,U;;0BAGjBe,Q,WADZF,OAAO,CAAC,UAAD,C,UAwDHC,QAAQ,CAACb,IAAD,C,UAERa,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE,CAACf,IAAD;AAAR,OAAD,C,2BA1Db,MACac,QADb;AAAA;AAAA,gCACuC;AAAA;AAAA;AAAA,eAK3BE,OAL2B;AAAA,eAS3BC,KAT2B;AAAA,eAa3BC,QAb2B,GAaa,EAbb;AAAA,eAiB3BC,QAjB2B;AAAA,eAqB3BC,KArB2B,GAqBX,IArBW;AAAA,eAyB3BC,QAzB2B;AAAA,eA6B3BC,OA7B2B,GA6BR,IA7BQ;AAAA,eAiC3BC,SAjC2B,GAiCP;AAAA;AAAA,wCAAWC,aAjCJ;AAAA,eAmC3BC,YAnC2B,GAmCgB;AAC/C,kBAAM,IADyC;AAE/C,kBAAM,IAFyC;AAG/C,kBAAM,IAHyC;AAI/C,kBAAM,IAJyC;AAK/C,kBAAM,IALyC;AAM/C,kBAAM,IANyC;AAO/C,kBAAM,IAPyC;AAQ/C,kBAAM,IARyC;AAS/C,kBAAM,IATyC;AAU/C,kBAAM,IAVyC;AAW/C,kBAAM,IAXyC;AAY/C,kBAAM,IAZyC;AAa/C,kBAAM,IAbyC;AAc/C,kBAAM,IAdyC;AAe/C,kBAAM,IAfyC;AAgB/C,kBAAM;AAhByC,WAnChB;AAAA,eAqDnCC,SArDmC,GAqDvB,KArDuB;;AAAA;;AAAA;;AAAA,eA+InCC,YA/ImC,GA+InBC,SAAD,IAA0B;AACrC,iBAAKV,QAAL,CAAcU,SAAS,CAACC,KAAxB,IAAiCD,SAAS,CAACE,MAA3C;;AACA,gBAAIF,SAAS,CAACE,MAAV,IAAoB,KAAKV,KAA7B,EAAoC;AAAI;AACpC,mBAAKD,QAAL,GAAgBS,SAAS,CAACC,KAA1B;AACH;AACJ,WApJkC;AAAA;;AA4D7BE,QAAAA,MAAM,GAAiB;AAAA;;AAAA;AACzB,YAAA,KAAI,CAACC,IAAL;;AACA,YAAA,KAAI,CAACC,aAAL;;AACA,YAAA,KAAI,CAACjB,OAAL,CAAakB,KAAb,CAAmB;AAAA;AAAA,gDAAcC,IAAd,GAAqBC,MAArB,CAA4B;AAAA;AAAA,4CAAgB,KAAI,CAAChB,KAArB,EAA4B,IAA5B,CAA5B,CAAnB,EAHyB,CAG0D;;AAH1D;AAI5B;;AAEDY,QAAAA,IAAI,GAAG;AACH,eAAKhB,OAAL,GAAe;AAAA;AAAA,yCAAf;AACH;;AAEDiB,QAAAA,aAAa,GAAG;AACZ;AAAA;AAAA,kCAAQI,GAAR,CAAY;AAAA;AAAA,gCAAOC,UAAnB,EAA+BC,OAA/B,CAAuC;AAAA;AAAA,sCAAUC,QAAjD,EAA2D,KAAKb,YAAhE,EAA8E,IAA9E;AACA;AAAA;AAAA,kCAAQU,GAAR,CAAY;AAAA;AAAA,gCAAOC,UAAnB,EAA+BC,OAA/B,CAAuC;AAAA;AAAA,sCAAUE,UAAjD,EAA6D,KAAKC,cAAlE,EAAkF,IAAlF,EAFY,CAGZ;AACA;AACA;AACA;AACA;AACH;;AAEDA,QAAAA,cAAc,CAACC,WAAD,EAA2B;AACrC,eAAK1B,KAAL,GAAa0B,WAAW,CAAC1B,KAAzB;AACA,eAAKK,OAAL,GAAeqB,WAAW,CAACd,KAAZ,IAAqB,KAAKV,QAAzC;;AACA,eAAK,IAAIyB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKC,QAAL,CAAcC,MAA1C,EAAkDF,KAAK,EAAvD,EAA2D;AACvD,gBAAIG,iBAAiB,GAAG,IAAI7C,SAAS,CAAC8C,YAAd,EAAxB;AACAD,YAAAA,iBAAiB,CAACE,MAAlB,GAA2B,KAAKC,IAAhC;AACAH,YAAAA,iBAAiB,CAACI,SAAlB,GAA8B,eAA9B;AACAJ,YAAAA,iBAAiB,CAACK,OAAlB,GAA4B,UAA5B;AACAL,YAAAA,iBAAiB,CAACM,eAAlB,GAAoCC,MAAM,CAACV,KAAD,CAA1C;AAEA,gBAAIW,MAAM,GAAG,KAAKV,QAAL,CAAcD,KAAd,EAAqBY,YAArB,CAAkCvD,MAAlC,CAAb;AACAsD,YAAAA,MAAM,CAACE,WAAP,CAAmBC,IAAnB,CAAwBX,iBAAxB;AACH;AACJ;;AAEDY,QAAAA,QAAQ,CAACC,KAAD,EAAQP,eAAR,EAAyB;AAC7BQ,UAAAA,OAAO,CAACC,GAAR,CAAYT,eAAZ;AACH,SAjGkC,CAmGnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACJ;AACA;AACA;;;AAQUU,QAAAA,cAAc,GAAG;AAAA;;AAAA;AACnB,kBAAM,MAAI,CAACC,SAAL,EAAN;AACA;AAAA;AAAA,sCAASC,QAAT,CAAkBC,IAAlB,CAAuB;AAAA;AAAA,0CAAWC,qBAAlC;AAFmB;AAGtB;;AAzJkC,O;;;;;iBAwDV,I;;;;;;;iBAEN,E","sourcesContent":["import { _decorator, Node, Button, Component } from \"cc\";\nimport EventMgr from \"../../Script/Base/EventMgr\";\nimport { LogicEvent } from \"../../Script/Games/LogicEvent\";\nimport { UIScreen } from \"../../Script/UIFrame/UIFrom\";\nimport Config from \"./games/Config\";\nimport FireKit from \"./games/fire/FireKit\";\nimport GameEngine from \"./games/GameEngine\";\nimport GameEvent from \"./games/GameEvent\";\nimport HumanPlayer from \"./games/HumanPlayer\";\nimport PlayerManager from \"./games/PlayerManager\";\nimport SitDownVO from \"./games/vo/SitDownVO\";\nimport StartGameVO from \"./games/vo/StartGameVO\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('UIBattle')\nexport class UIBattle extends UIScreen {\n\n    /**\n * 引擎\n */\n    private _engine: GameEngine;\n    /**\n     * 当前牌面的牌\n     */\n    private cards: number[];\n    /**\n     * Chair -> ID\n     */\n    private chairIds: { [chair: number]: number } = {};\n    /**\n     * 自己的编号\n     */\n    private _meChair: number;\n    /**\n     * 自己的游戏ID\n     */\n    private _meId: number = 1001;\n    /**\n     * 颜色\n     */\n    private _meColor: number;\n    /**\n     * 锁定状态\n     */\n    private _locked: boolean = true;\n    /**\n     * 开始的位置\n     */\n    private fromIndex: number = GameEngine.INVALID_INDEX;\n\n    private _iconMapping: { [key: number]: string; } = {\n        0x00: \"蓝鼠\",\n        0x01: \"蓝猫\",\n        0x02: \"蓝狗\",\n        0x03: \"蓝狼\",\n        0x04: \"蓝豹\",\n        0x05: \"蓝虎\",\n        0x06: \"蓝狮\",\n        0x07: \"蓝象\",\n        0x10: \"红鼠\",\n        0x11: \"红猫\",\n        0x12: \"红狗\",\n        0x13: \"红狼\",\n        0x14: \"红豹\",\n        0x15: \"红虎\",\n        0x16: \"红狮\",\n        0x17: \"红象\"\n    };\n    isEngross = false;\n\n    @property(Node)\n    private btnFight: Node = null;\n    @property({ type: [Node] })\n    btnCards: Node[] = [];\n\n    async onShow(...params: any) {\n        this.init();\n        this.eventRegister();\n        this._engine.enter(PlayerManager.inst().create(new HumanPlayer(this._meId, \"鸡哥\")));// 进入游戏\n    }\n\n    init() {\n        this._engine = new GameEngine();\n    }\n\n    eventRegister() {\n        FireKit.use(Config.HUMAN_FIRE).onGroup(GameEvent.SIT_DOWN, this.sitDownLogic, this);\n        FireKit.use(Config.HUMAN_FIRE).onGroup(GameEvent.START_GAME, this.startGameLogic, this);\n        // FireKit.use(Config.HUMAN_FIRE).onGroup(GameEvent.OPEN_RESULT, this.openResultLogic, this);\n        // FireKit.use(Config.HUMAN_FIRE).onGroup(GameEvent.CONFIRM_COLOR, this.confirmColorLogic, this);\n        // FireKit.use(Config.HUMAN_FIRE).onGroup(GameEvent.OPERATION_NOTIFY, this.operationNotifyLogic, this);\n        // FireKit.use(Config.HUMAN_FIRE).onGroup(GameEvent.MOVE_RESULT, this.moveResultLogic, this);\n        // FireKit.use(Config.HUMAN_FIRE).onGroup(GameEvent.END_GAME, this.endGameLogic, this);\n    }\n\n    startGameLogic(startGameVo: StartGameVO) {\n        this.cards = startGameVo.cards;\n        this._locked = startGameVo.chair != this._meChair;\n        for (let index = 0; index < this.btnCards.length; index++) {\n            let clickEventHandler = new Component.EventHandler();\n            clickEventHandler.target = this.node;\n            clickEventHandler.component = 'UIBattleScene';\n            clickEventHandler.handler = 'callback';\n            clickEventHandler.customEventData = String(index);\n\n            let button = this.btnCards[index].addComponent(Button);\n            button.clickEvents.push(clickEventHandler);\n        }\n    }\n\n    callback(event, customEventData) {\n        console.log(customEventData)\n    }\n\n    // callback(event, customEventData) {\n    //     let node = event.target;\n    //     let button = node.getComponent(Button);\n    //     let index = customEventData;\n    //     let row = Math.floor(index / 4);\n    //     let col = index % 4;\n    //     console.log('row:' + row + ',col:' + col);\n    //     console.log(this._locked)\n    //     if (!this._locked) {\n    //         let card = this.cards[index];\n    //         console.log('card:' + card);\n    //         let color = card >> 4;//判断花色\n    //         console.log('card >> 4' + color);\n\n    //         if (color === FBGameEngine.DARK) {\n    //             this._engine.open(new OpenCardDTO(this._meChair, index, card));\n    //         } else {\n    //             if (this.fromIndex == FBGameEngine.INVALID_INDEX) {\n    //                 if (color == this._meColor) {\n    //                     // 选中了自己添加选中状态\n    //                     this.updateAndSelectStyle(index);\n    //                     this.fromIndex = index;\n    //                 }\n    //             } else {\n    //                 if (this._engine.canMove(this.fromIndex, index, this.cards)) {\n    //                     this._engine.move(new MoveCardDTO(this._meChair, this.fromIndex, index));\n    //                     this.fromIndex = FBGameEngine.INVALID_INDEX;\n    //                     this.clearSelectStyle();    // 清除选中状态\n    //                 } else {\n    //                     //选中后 再切换到别的牌\n    //                     if (color == this._meColor) {\n    //                         this.updateAndSelectStyle(index);\n    //                         this.fromIndex = index;\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     }\n    // }\n\n    /**\n     *\n     * @param sitDownVO\n     */\n    sitDownLogic = (sitDownVO: SitDownVO) => {\n        this.chairIds[sitDownVO.chair] = sitDownVO.userId;\n        if (sitDownVO.userId == this._meId) {   //如果是自己\n            this._meChair = sitDownVO.chair;\n        }\n    };\n\n    async onBtnBackLobby() {\n        await this.closeSelf();\n        EventMgr.Instance.emit(LogicEvent.ENTER_HALL_FROM_GAMES);\n    }\n}"]}
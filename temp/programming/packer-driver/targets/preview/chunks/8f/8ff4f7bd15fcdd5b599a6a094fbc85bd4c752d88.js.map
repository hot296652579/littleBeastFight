{"version":3,"sources":["file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Battle/Script/UIBattle.ts"],"names":["_decorator","Node","Button","Component","Sprite","EventMgr","ResMgr","LogicEvent","UIScreen","Config","MoveCardDTO","OpenCardDTO","FireKit","GameEngine","GameEvent","HumanPlayer","PlayerManager","UICard","TweenUtil","ccclass","property","UIBattle","type","_engine","cards","chairIds","_meChair","_meId","_meColor","_locked","fromIndex","INVALID_INDEX","_iconMapping","isEngross","openResultLogic","openResultVO","index","card","clearSelectStyle","updateOpenCard","updateAndSelectStyle","sitDownLogic","sitDownVO","chair","userId","onShow","init","eventRegister","enter","inst","create","icon","getInstance","getSpriteFrameByPath","test","spriteFrame","use","HUMAN_FIRE","onGroup","SIT_DOWN","START_GAME","startGameLogic","OPEN_RESULT","startGameVo","console","log","node","btnCards","length","clickEventHandler","EventHandler","target","component","handler","customEventData","String","button","addComponent","getChildByName","clickEvents","push","callback","event","getComponent","row","Math","floor","col","color","DARK","open","canMove","move","cardTemp","getCardItemTemp","flip","updateStyle","i","element","Number","MAX_CARD","onBtnBackLobby","closeSelf","Instance","emit","ENTER_HALL_FROM_GAMES"],"mappings":"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","sourcesContent":["import { _decorator, Node, Button, Component, TiledUserNodeData, Sprite } from \"cc\";\nimport EventMgr from \"../../Script/Base/EventMgr\";\nimport { ResMgr } from \"../../Script/Base/ResMgr\";\nimport { LogicEvent } from \"../../Script/Games/LogicEvent\";\nimport { UIScreen } from \"../../Script/UIFrame/UIFrom\";\nimport Config from \"./games/Config\";\nimport MoveCardDTO from \"./games/dto/MoveCardDTO\";\nimport OpenCardDTO from \"./games/dto/OpenCardDTO\";\nimport FireKit from \"./games/fire/FireKit\";\nimport GameEngine from \"./games/GameEngine\";\nimport GameEvent from \"./games/GameEvent\";\nimport HumanPlayer from \"./games/HumanPlayer\";\nimport PlayerManager from \"./games/PlayerManager\";\nimport UICard from \"./games/UI/UICard\";\nimport TweenUtil from \"./games/utils/TweenUtils\";\nimport OpenResultVO from \"./games/vo/OpenResultVO\";\nimport SitDownVO from \"./games/vo/SitDownVO\";\nimport StartGameVO from \"./games/vo/StartGameVO\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('UIBattle')\nexport class UIBattle extends UIScreen {\n\n    /**\n     * 引擎\n     */\n    private _engine: GameEngine;\n    /**\n     * 当前牌面的牌\n     */\n    private cards: number[];\n    /**\n     * Chair -> ID\n     */\n    private chairIds: { [chair: number]: number } = {};\n    /**\n     * 自己的编号\n     */\n    private _meChair: number;\n    /**\n     * 自己的游戏ID\n     */\n    private _meId: number = 1001;\n    /**\n     * 颜色\n     */\n    private _meColor: number;\n    /**\n     * 锁定状态\n     */\n    private _locked: boolean = true;\n    /**\n     * 开始的位置\n     */\n    private fromIndex: number = GameEngine.INVALID_INDEX;\n\n    @property(Node)\n    UIGames: Node = null\n\n    @property(Sprite)\n    test: Sprite = null\n\n    private _iconMapping: { [key: number]: string; } = {\n        0x00: \"蓝鼠\",\n        0x01: \"蓝猫\",\n        0x02: \"蓝狗\",\n        0x03: \"蓝狼\",\n        0x04: \"蓝豹\",\n        0x05: \"蓝虎\",\n        0x06: \"蓝狮\",\n        0x07: \"蓝象\",\n        0x10: \"红鼠\",\n        0x11: \"红猫\",\n        0x12: \"红狗\",\n        0x13: \"红狼\",\n        0x14: \"红豹\",\n        0x15: \"红虎\",\n        0x16: \"红狮\",\n        0x17: \"红象\"\n    };\n    isEngross = false;\n\n    @property({ type: [Node] })\n    btnCards: Node[] = [];\n\n    async onShow(...params: any) {\n        this.init();\n        this.eventRegister();\n\n        this._engine.enter(PlayerManager.inst().create(new HumanPlayer(this._meId, \"鸡哥\")));// 进入游戏\n\n        const icon = await ResMgr.getInstance().getSpriteFrameByPath('Battle/Texture/animal/lion')\n        this.test.spriteFrame = icon\n    }\n\n    init() {\n        this._engine = new GameEngine();\n    }\n\n    eventRegister() {\n        FireKit.use(Config.HUMAN_FIRE).onGroup(GameEvent.SIT_DOWN, this.sitDownLogic, this);\n        FireKit.use(Config.HUMAN_FIRE).onGroup(GameEvent.START_GAME, this.startGameLogic, this);\n        FireKit.use(Config.HUMAN_FIRE).onGroup(GameEvent.OPEN_RESULT, this.openResultLogic, this);\n        // FireKit.use(Config.HUMAN_FIRE).onGroup(GameEvent.CONFIRM_COLOR, this.confirmColorLogic, this);\n        // FireKit.use(Config.HUMAN_FIRE).onGroup(GameEvent.OPERATION_NOTIFY, this.operationNotifyLogic, this);\n        // FireKit.use(Config.HUMAN_FIRE).onGroup(GameEvent.MOVE_RESULT, this.moveResultLogic, this);\n        // FireKit.use(Config.HUMAN_FIRE).onGroup(GameEvent.END_GAME, this.endGameLogic, this);\n    }\n\n    startGameLogic(startGameVo: StartGameVO) {\n        console.log(this.node)\n        this.cards = startGameVo.cards;\n        this._locked = startGameVo.chair != this._meChair;\n        for (let index = 0; index < this.btnCards.length; index++) {\n            let clickEventHandler = new Component.EventHandler();\n            clickEventHandler.target = this.node;\n            clickEventHandler.component = 'UIBattle';\n            clickEventHandler.handler = 'callback';\n            clickEventHandler.customEventData = String(index);\n            let button = this.btnCards[index].addComponent(Button)\n            this.btnCards[index].getChildByName('Sprite').addComponent(UICard)\n            button.clickEvents.push(clickEventHandler);\n        }\n    }\n\n    callback(event, customEventData) {\n        let node = event.target;\n        let button = node.getComponent(Button);\n        let index = customEventData;\n        let row = Math.floor(index / 4);\n        let col = index % 4;\n        console.log('row:' + row + ',col:' + col);\n        console.log(this._locked)\n        if (!this._locked) {\n            let card = this.cards[index];\n            let color = card >> 4;//判断花色\n\n            if (color === GameEngine.DARK) {\n                this._engine.open(new OpenCardDTO(this._meChair, index));\n            } else {\n                if (this.fromIndex == GameEngine.INVALID_INDEX) {\n                    if (color == this._meColor) {\n                        // 选中了自己添加选中状态\n                        this.updateAndSelectStyle(index);\n                        this.fromIndex = index;\n                    }\n                } else {\n                    if (this._engine.canMove(this.fromIndex, index, this.cards)) {\n                        this._engine.move(new MoveCardDTO(this._meChair, this.fromIndex, index));\n                        this.fromIndex = GameEngine.INVALID_INDEX;\n                        this.clearSelectStyle();    // 清除选中状态\n                    } else {\n                        //选中后 再切换到别的牌\n                        if (color == this._meColor) {\n                            this.updateAndSelectStyle(index);\n                            this.fromIndex = index;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     *\n     * @param openResultVO\n     */\n    openResultLogic = (openResultVO: OpenResultVO) => {\n        this.cards[openResultVO.index] = openResultVO.card;\n        this.clearSelectStyle();\n        this.updateOpenCard(openResultVO);\n        this.updateAndSelectStyle(openResultVO.index);\n        this.fromIndex = GameEngine.INVALID_INDEX;\n    };\n    async updateOpenCard(openResultVO) {\n        console.log('openResultVO', openResultVO)\n        let card = openResultVO.card;\n        let index = openResultVO.index;\n        let cardTemp = this.getCardItemTemp(index);\n\n        await TweenUtil.flip(cardTemp.getChildByName('Sprite'), 0.8, () => {\n            this.updateStyle(index, card);\n        });\n    }\n    getCardItemTemp(index: any) {\n        for (let i = 0; i < this.btnCards.length; i++) {\n            const element = this.btnCards[i];\n            if (i == Number(index))\n                return element;\n        }\n    }\n\n    /**\n     * 更新牌的样式\n     * @param index\n     */\n    async updateStyle(index, card) {\n        let cardTemp = this.getCardItemTemp(index);\n        // let UICardCom = cardTemp.getChildByName('Sprite').getComponent(UICard)\n        // UICardCom.refreshSprite(card)\n        const icon = await ResMgr.getInstance().getSpriteFrameByPath('Battle/Texture/animal/lion')\n        cardTemp.getChildByName('Sprite').getComponent(Sprite).spriteFrame = icon\n    }\n\n    /**\n     * 增加选择状态\n     * @param index\n     */\n    private updateAndSelectStyle(index: number) {\n        this.clearSelectStyle();            // 先清除选中\n\n    }\n\n    /**\n     * 清除选中状态\n     */\n    private clearSelectStyle() {\n        for (let i = 0; i < GameEngine.MAX_CARD; i++) {\n            // let gObject = this._view.getChild(\"card_\" + i);\n            // if (gObject != null) {\n            //     gObject.asCom.getChild(\"active\").asImage.visible = false;\n            // }\n        }\n    }\n\n    /**\n     *\n     * @param sitDownVO\n     */\n    sitDownLogic = (sitDownVO: SitDownVO) => {\n        this.chairIds[sitDownVO.chair] = sitDownVO.userId;\n        if (sitDownVO.userId == this._meId) {   //如果是自己\n            this._meChair = sitDownVO.chair;\n        }\n    };\n\n    async onBtnBackLobby() {\n        await this.closeSelf();\n        EventMgr.Instance.emit(LogicEvent.ENTER_HALL_FROM_GAMES);\n    }\n}"]}
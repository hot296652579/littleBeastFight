{"version":3,"sources":["file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Battle/Script/games/GameEngine.ts"],"names":["GameEngine","SitDownDTO","StartGameDTO","OperationNotifyDTO","MoveResultDTO","OpenResultDTO","EndGameDTO","ConfirmColorDTO","FireKit","Config","AiEngine","constructor","players","chairColors","cards","currCards","DARK_CARD","currChair","_aiEngine","init","HUMAN_FIRE","AI_FIRE","enter","player","chair","assignChair","INVALID_CHAIR","sendSitDown","createAiPlayer","startGame","shuffle","sendStartGame","key","sitDown","userId","name","sendOpenResult","index","card","openResult","sendMoveResult","fromIndex","fromCard","toIndex","toCard","result","moveResult","sendOperationNotify","nextChair","operationNotify","sendEndGame","c","checkWin","k","parseInt","endGame","sendConfirmColor","color","confirmColor","open","openCardDTO","console","log","JSON","stringify","length","Object","keys","i","MAX_CHAIR","RED","BLUE","move","moveCardDTO","fromV","nextV","fromC","toC","NONE_CARD","indexOf","blueC","redC","forEach","v","sort","Math","random","canMove","from","to","iRow","floor","iCol","jRow","jCol","abs","MAX_CARD","DARK","NONE","INVALID_INDEX"],"mappings":"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","sourcesContent":["\nimport Player from \"./Player\";\nimport SitDownDTO from \"./dto/SitDownDTO\";\nimport StartGameDTO from \"./dto/StartGameDTO\";\nimport OpenCardDTO from \"./dto/OpenCardDTO\";\nimport OperationNotifyDTO from \"./dto/OperationNotifyDTO\";\nimport MoveCardDTO from \"./dto/MoveCardDTO\";\nimport MoveResultDTO from \"./dto/MoveResultDTO\";\nimport OpenResultDTO from \"./dto/OpenResultDTO\";\nimport EndGameDTO from \"./dto/EndGameDTO\";\nimport ConfirmColorDTO from \"./dto/ConfirmColorDTO\";\nimport FireKit from \"./fire/FireKit\";\nimport Config from \"./Config\";\nimport AiEngine from \"./AiEngine\";\n\n/**\n * 游戏引擎\n */\nexport default class GameEngine {\n\n    /**\n     * 最多牌数量\n     */\n    static MAX_CARD: number = 16;\n    /**\n     * 最大椅子个数\n     */\n    static MAX_CHAIR: number = 2;\n    /**\n     * 无效的牌\n     */\n    static NONE_CARD: number = 0xF0;\n    /**\n     * 未知的牌，未翻牌\n     */\n    static DARK_CARD: number = 0xE0;\n    /**\n     * 颜色\n     */\n    static BLUE: number = 0x00;\n    /**\n     * 红色\n     */\n    static RED: number = 0x01;\n    /**\n     * 未知牌颜色标识\n     */\n    static DARK: number = 0x0E;\n    /**\n     * 无效牌颜色标识\n     */\n    static NONE: number = 0x0F;\n    /**\n     * 无效的椅子\n     */\n    static INVALID_CHAIR: number = 0xFF;\n    /**\n     * 无效的位置\n     */\n    static INVALID_INDEX: number = 0xFF;\n    /**\n     * 当前游戏里玩家\n     */\n    private players: { [key: number]: Player } = {};\n    /**\n     * 椅子与颜色的对应关系\n     */\n    private chairColors: { [key: number]: number } = {};\n    /**\n     * 游戏动物棋牌\n     */\n    private cards: number[] = [\n        // 鼠    猫    狗    狼    豹    虎    狮    象\n        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, // 蓝色\n        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17  // 红色\n    ];\n    /**\n     * 当前桌面的牌\n     */\n    private currCards: number[] = [\n        GameEngine.DARK_CARD, GameEngine.DARK_CARD, GameEngine.DARK_CARD, GameEngine.DARK_CARD, GameEngine.DARK_CARD, GameEngine.DARK_CARD, GameEngine.DARK_CARD, GameEngine.DARK_CARD,\n        GameEngine.DARK_CARD, GameEngine.DARK_CARD, GameEngine.DARK_CARD, GameEngine.DARK_CARD, GameEngine.DARK_CARD, GameEngine.DARK_CARD, GameEngine.DARK_CARD, GameEngine.DARK_CARD];\n    /**\n     * 当前操作的玩家 0 / 1\n     */\n    private currChair: number;\n    /**\n     * AI 引擎\n     */\n    private _aiEngine: AiEngine;\n\n    constructor() {\n        FireKit.init(Config.HUMAN_FIRE);\n        FireKit.init(Config.AI_FIRE);\n        this._aiEngine = new AiEngine(this);    //初始化AI引擎\n    }\n\n    /**\n     * 玩家进入游戏\n     * @param player\n     */\n    enter(player: Player) {\n        let chair = this.assignChair();             // 分配椅子\n        if (chair != GameEngine.INVALID_CHAIR) {    // 分配成功并且通知玩家\n            this.players[chair] = player;\n            this.sendSitDown(chair, player);\n            if (this.assignChair() != GameEngine.INVALID_CHAIR) {    //如果还有空闲的椅子\n                this._aiEngine.createAiPlayer();\n            } else { // 坐满开局\n                this.startGame(); //游戏开始\n            }\n        }\n    }\n\n    /**\n     * 开始游戏\n     */\n    startGame() {\n        this.cards = this.shuffle();\n        // this.currChair = Math.floor(Math.random() * GameEngine.MAX_CHAIR - 1);//随机生成第一个椅子\n        this.currChair = 0\n        this.sendStartGame();\n    }\n\n    /**\n     * 发送开始游戏\n     */\n    private sendStartGame() {\n        for (let key in this.players) {\n            this.players[key].startGame(new StartGameDTO(this.currChair, this.currCards));\n        }\n    }\n\n    /**\n     * 给所有玩家发送玩家坐下的信息\n     * @param chair\n     * @param player\n     */\n    private sendSitDown(chair: number, player: Player) {\n        for (let key in this.players) {\n            this.players[key].sitDown(new SitDownDTO(player.userId, chair, player.name));\n        }\n    }\n\n    /**\n     * 发送显示牌\n     * @param chair\n     * @param index\n     * @param card\n     */\n    private sendOpenResult(chair: number, index: number, card: number) {\n        for (let key in this.players) {\n            this.players[key].openResult(new OpenResultDTO(chair, index, card));\n        }\n    }\n\n    /**\n     * 发送移动结果\n     * @param chair\n     * @param fromIndex\n     * @param fromCard\n     * @param toIndex\n     * @param toCard\n     * @param result\n     */\n    private sendMoveResult(chair: number, fromIndex: number, fromCard: number, toIndex: number, toCard: number, result: number) {\n        for (let key in this.players) {\n            this.players[key].moveResult(new MoveResultDTO(chair, fromIndex, fromCard, toIndex, toCard, result));\n        }\n    }\n\n    /**\n     * 发送玩家操作通知\n     */\n    private sendOperationNotify() {\n        this.currChair = this.nextChair();  // 获取下一个操作的椅子\n        for (let key in this.players) {\n            this.players[key].operationNotify(new OperationNotifyDTO(this.currChair));\n        }\n    }\n\n    /**\n     * 发送游戏结束信息\n     */\n    private sendEndGame() {\n        let c = this.checkWin();    // 胜利的颜色\n        let chair: number;\n        for (let k in this.chairColors) {\n            if (this.chairColors[k] == c) {\n                chair = parseInt(k);\n            }\n        }\n        for (let key in this.players) {\n            this.players[key].endGame(new EndGameDTO(chair, c));\n        }\n    }\n\n    /**\n     * 分配颜色\n     */\n    private sendConfirmColor(chair: number, color: number) {\n        for (let key in this.players) {\n            this.players[key].confirmColor(new ConfirmColorDTO(chair, color));\n        }\n    }\n\n    /**\n     * 开牌\n     * @param openCardDTO\n     */\n    open(openCardDTO: OpenCardDTO) {\n        console.log(\"OpenCard:\" + JSON.stringify(openCardDTO));\n        let chair = openCardDTO.chair;\n        let index = openCardDTO.index;\n        if (chair != this.currChair) {\n            console.log(\"无效操作.\");\n            return;\n        }\n        if (this.currCards[index] == GameEngine.DARK_CARD) {\n            let card = this.cards[index];\n            let length = Object.keys(this.chairColors).length\n            if (length == 0) {    //分配颜色\n                for (let i = 0; i < GameEngine.MAX_CHAIR; i++) {\n                    if (i == chair) {\n                        this.chairColors[chair] = (card >> 4);\n                        this.sendConfirmColor(chair, (card >> 4));\n                    } else {\n                        this.chairColors[i] = GameEngine.RED ? GameEngine.BLUE : GameEngine.RED;\n                        this.sendConfirmColor(i, (card >> 4) == GameEngine.RED ? GameEngine.BLUE : GameEngine.RED);\n                    }\n                }\n            }\n            this.currCards[index] = card;\n            this.sendOpenResult(chair, index, this.currCards[index]);\n            if (this.checkWin() != -1) {\n                this.sendEndGame();\n            } else {\n                this.sendOperationNotify();\n            }\n        }\n    }\n\n    /**\n     * 移动牌\n     * @param moveCardDTO\n     */\n    move(moveCardDTO: MoveCardDTO) {\n        console.log(\"MoveCard:\" + JSON.stringify(moveCardDTO));\n        let fromIndex = moveCardDTO.fromIndex;\n        let toIndex = moveCardDTO.toIndex;\n        let fromCard = this.currCards[fromIndex];   // 当前位置的牌\n        let toCard = this.currCards[toIndex];   // 下一个位置的牌\n        let fromV = (fromCard & 0x0F);\n        let nextV = (toCard & 0x0F);\n        let fromC = fromCard >> 4;\n        let toC = toCard >> 4;\n        if (fromC > 1 || toC == (GameEngine.DARK_CARD >> 4)) {  // 当前位置不是正常的牌，或者下一个位置是未翻开的牌\n            console.log(\"异常操作\");\n            return;\n        }\n        this.currCards[fromIndex] = GameEngine.NONE_CARD;           // 当前位置变成空\n        if (toC == (GameEngine.NONE_CARD >> 4)) {                   // 下个位置是空位\n            this.currCards[toIndex] = fromCard;\n        } else { // 非空未知\n            if (fromV > nextV) {\n                if (fromV == 7 && nextV == 0) { // 大象 和 老鼠\n                    this.currCards[toIndex] = toCard;\n                } else {\n                    this.currCards[toIndex] = fromCard;\n                }\n            }\n            if (fromV == nextV) {\n                this.currCards[toIndex] = GameEngine.NONE_CARD;\n            }\n            if (fromV < nextV) {\n                if (fromV == 0 && nextV == 7) { // 老鼠 和 大象\n                    this.currCards[toIndex] = fromCard;\n                } else {\n                    this.currCards[toIndex] = toCard;\n                }\n            }\n        }\n        let result: number;\n        if (this.currCards[toIndex] == GameEngine.NONE_CARD) {\n            result = 0;\n        } else if (this.currCards[toIndex] == fromCard) {\n            result = 1;\n        } else {\n            result = -1;\n        }\n        this.sendMoveResult(moveCardDTO.chair, fromIndex, this.currCards[fromIndex], toIndex, this.currCards[toIndex], result);\n        if (this.checkWin() != -1) {\n            this.sendEndGame();\n        } else {\n            this.sendOperationNotify();\n        }\n    }\n\n    /**\n     * 校验游戏是否结束\n     */\n    private checkWin(): number {\n        if (this.currCards.indexOf(GameEngine.DARK_CARD) == -1) {\n            let blueC = 0;\n            let redC = 0;\n            this.currCards.forEach((v) => {\n                if (v != GameEngine.NONE_CARD) {\n                    if ((v >> 4) == 0) {\n                        blueC++;\n                    } else {\n                        redC++;\n                    }\n                }\n            });\n            if (blueC == 0) {\n                return GameEngine.RED; // 红赢\n            }\n            if (redC == 0) {\n                return GameEngine.BLUE; // 蓝赢\n            }\n        }\n        return -1;\n    }\n\n    /**\n     *  洗牌，随机数组\n     */\n    private shuffle(): number[] {\n        this.cards.sort(function () {\n            return Math.random() - 0.5\n        })\n        return this.cards;\n    }\n\n    /**\n     * 分配椅子\n     */\n    private assignChair(): number {\n        for (let i = 0; i < GameEngine.MAX_CHAIR; i++) {\n            if (this.players[i] == null) {\n                return i;\n            }\n        }\n        return GameEngine.INVALID_CHAIR;\n    }\n\n    /**\n     * 获取下一个操作的玩家\n     */\n    private nextChair(): number {\n        return (this.currChair + 1) % GameEngine.MAX_CHAIR;\n    }\n\n\n    /**\n     * 是否可以移动\n     * @param from  当前\n     * @param to    目标\n     * @param cards 牌\n     */\n    public canMove(from: number, to: number, cards: number[]): boolean {\n        let iRow = Math.floor(from / 4);\n        let iCol = from % 4;\n        let jRow = Math.floor(to / 4);\n        let jCol = to % 4;\n        if (cards[from] == GameEngine.DARK_CARD\n            || cards[to] == GameEngine.DARK_CARD\n            || (cards[from] >> 4) == (cards[to] >> 4)) {\n            return false;\n        }\n        return (iRow == jRow && Math.abs(iCol - jCol) == 1) || (iCol == jCol && Math.abs(iRow - jRow) == 1);\n    }\n\n}\n"]}
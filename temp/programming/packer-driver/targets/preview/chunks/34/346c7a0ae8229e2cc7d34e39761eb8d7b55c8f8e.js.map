{"version":3,"sources":["file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Script/UIFrame/ModalMgr.ts"],"names":["BlockInputEvents","Tween","Node","tween","UIOpacity","_decorator","FormType","ModalOpacity","UIManager","ccclass","property","ModalMgr","getInstance","instance","initMaskNode","maskNode","nPopUp","parent","active","getComponent","opacity","checkModalWinAndPopUp","coms","maskArr","isOpen","hasShow","console","log","key","Object","prototype","hasOwnProperty","call","element","idx","com","tcom","formType","FormType_Win","maskKey","fid","modalType","OpacityZero","opac","getOpacityByMask","stopAllByTarget","t","getShowEffectTime","to","easing","clickMaskClose","off","EventType","TOUCH_START","on","closeForm","addComponent","start","getHideEffectTime","length","checkModalWindow","i","uimask","node","getChildByName","maskOpacity","tOp","OpacityLow","OpacityHalf","OpacityHigh","OpacityFull"],"mappings":"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","sourcesContent":["\nimport { BlockInputEvents, Component, Tween, Node, tween, UIOpacity, UITransform, _decorator } from \"cc\";\nimport { FormType, ModalOpacity } from \"../Config/SysDefine\";\nimport { UIBase } from \"./UIBase\";\nimport { UIWindow } from \"./UIFrom\";\nimport { UIManager } from \"./UIMgr\";\n// import { UIManager } from \"./UIManager\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"ModalMgr\")\nexport class ModalMgr {\n\n    //private uiModal!:UIModalScript;\n    private maskNode!: Node;\n    private nPopUp!: Node\n    //public static popUpRoot = SysDefine.SYS_UIROOT_NAME + '/' + SysDefine.SYS_POPUP_NODE;\n    public static instance: ModalMgr;\n    public static getInstance() {\n        if (this.instance == null) {\n            this.instance = new ModalMgr();\n        }\n        return this.instance;\n    }\n\n\n\n\n    public initMaskNode(maskNode: Node) {\n        this.maskNode = maskNode;\n        this.nPopUp = maskNode.parent!;\n        this.maskNode.active = false;\n        this.maskNode.getComponent(UIOpacity)!.opacity = 0;\n    }\n\n    /** 为mask添加颜色 */\n    // private async showModal(maskType: ModalType) {\n    //     await this.uiModal.showModal(maskType.opacity, maskType.easingTime, maskType.isEasing);\n    // }\n\n    /**\n     * coms 是窗体\n     * maskArr 是屏蔽层的数据\n     * @param coms \n     * @param maskArr \n     * @param isOpen \n     */\n    public checkModalWinAndPopUp(coms: UIBase[], maskArr: { [key: string]: Node }, isOpen: boolean = true) {\n        //保证永远只显示一个遮罩 显示\n        let hasShow: boolean = false;\n        console.log(\"检查屏蔽层的这招显示\");\n        console.log(coms);\n\n        console.log(maskArr);\n        for (const key in maskArr) {\n            if (Object.prototype.hasOwnProperty.call(maskArr, key)) {\n                const element = maskArr[key]\n            }\n        }\n        console.log(\"检查屏蔽层的这招显示\");\n        for (let idx = coms.length - 1; idx >= 0; idx--) {\n            let com = coms[idx];\n\n            let tcom: UIWindow | null = null;\n            if (com.formType == FormType.FormType_Win) {\n                tcom = com as UIWindow;\n            }\n            if (tcom != null) {\n                let maskKey = tcom.fid;\n                if (maskArr[maskKey]) {\n                    if (tcom.modalType.opacity >= ModalOpacity.OpacityZero && !hasShow) {\n                        maskArr[maskKey].active = true;\n\n                        if (isOpen) {\n                            maskArr[maskKey].getComponent(UIOpacity)!.opacity = 0;\n                            let opac = this.getOpacityByMask(tcom.modalType.opacity);\n                            Tween.stopAllByTarget(maskArr[maskKey]);\n                            let t = tcom.getShowEffectTime();\n\n                            tween<UIOpacity>(maskArr[maskKey].getComponent(UIOpacity))\n                                .to(t, { opacity: opac }, { easing: 'linear' })\n                                // 当前面的动作都执行完毕后才会调用这个回调函数\n                                .call(() => {\n                                    if (tcom!.modalType?.clickMaskClose) {\n                                        maskArr[maskKey].off(Node.EventType.TOUCH_START);\n                                        maskArr[maskKey].on(Node.EventType.TOUCH_START, () => {\n                                            UIManager.getInstance().closeForm(tcom!.fid);\n                                        });\n\n                                        if (tcom.getComponent(BlockInputEvents) == null) {\n                                            tcom.addComponent(BlockInputEvents);\n                                        }\n                                    }\n                                })\n                                .start()\n                        } else {\n                            let opac = this.getOpacityByMask(tcom.modalType.opacity);\n                            maskArr[maskKey].getComponent(UIOpacity).opacity = opac;\n                        }\n                        hasShow = true;\n                    } else {\n                        let t = com.getHideEffectTime();\n                        tween<UIOpacity>(maskArr[maskKey].getComponent(UIOpacity)!).to(t, { opacity: 0 }, { easing: 'linear' }).call(() => {\n                        }).start();\n                    }\n                }\n            }\n        }\n    }\n\n\n\n    //判断有多少个wins 是否需要屏蔽层\n    public checkModalWindow(coms: UIWindow[]) {\n        for (let i = coms.length - 1; i >= 0; i--) {\n            if (coms[i].modalType.opacity > 0) {\n                let uimask = coms[i].node.getChildByName(\"UIMask\")!\n                uimask.active = true;\n                let opac = uimask.getComponent(UIOpacity)!.opacity;\n                uimask.getComponent(UIOpacity)!.opacity = 0;\n                tween(uimask.getComponent(UIOpacity)).to(0.5, { opacity: opac }, { easing: \"linear\" }).start();\n            } else {\n                let uimask = coms[i].node.getChildByName(\"UIMask\")!\n                if (uimask.active) {\n                    tween(uimask.getComponent(UIOpacity)).to(0.5, { opacity: 0 }, { easing: \"linear\" }).call(() => {\n                        uimask.active = false;\n                    }).start();\n                }\n            }\n        }\n    }\n\n\n    private getOpacityByMask(maskOpacity: ModalOpacity) {\n        let tOp = 0;\n        if (maskOpacity == ModalOpacity.OpacityZero) {\n            tOp = 1;\n        } else if (maskOpacity == ModalOpacity.OpacityLow) {\n            tOp = 60;\n        } else if (maskOpacity == ModalOpacity.OpacityHalf) {\n            tOp = 125;\n        } else if (maskOpacity == ModalOpacity.OpacityHigh) {\n            tOp = 200;\n        } else if (maskOpacity == ModalOpacity.OpacityFull) {\n            tOp = 255;\n        }\n        return tOp;\n    }\n\n\n}"]}
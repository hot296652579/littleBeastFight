{"version":3,"sources":["file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Script/UIFrame/ModalMgr.ts"],"names":["Tween","tween","UIOpacity","UITransform","_decorator","FormType","ModalOpacity","ccclass","property","ModalMgr","getInstance","instance","initMaskNode","maskNode","checkModalWinAndPopUp","coms","maskArr","isOpen","hasShow","console","log","key","Object","prototype","hasOwnProperty","call","element","idx","length","com","tcom","formType","FormType_Win","maskKey","fid","modalType","opacity","OpacityZero","active","getComponent","opac","getOpacityByMask","stopAllByTarget","t","getShowEffectTime","getHideEffectTime","to","easing","start","checkModalWindow","i","uimask","node","getChildByName","maskOpacity","tOp","OpacityLow","OpacityHalf","OpacityHigh","OpacityFull"],"mappings":"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","sourcesContent":["\nimport { BlockInputEvents, Component, Tween, tween, UIOpacity, UITransform, _decorator } from \"cc\";\nimport { FormType, ModalOpacity } from \"../Config/SysDefine\";\nimport { UIBase } from \"./UIBase\";\nimport { UIWindow } from \"./UIFrom\";\n// import { UIManager } from \"./UIManager\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"ModalMgr\")\nexport class ModalMgr {\n\n    //private uiModal!:UIModalScript;\n    private maskNode!: Node;\n    private nPopUp!: Node\n    //public static popUpRoot = SysDefine.SYS_UIROOT_NAME + '/' + SysDefine.SYS_POPUP_NODE;\n    public static instance: ModalMgr;\n    public static getInstance() {\n        if (this.instance == null) {\n            this.instance = new ModalMgr();\n        }\n        return this.instance;\n    }\n\n\n\n\n    public initMaskNode(maskNode: Node) {\n        // this.maskNode = maskNode;\n        // this.nPopUp = maskNode.parent!;\n        // this.maskNode.active = false;\n        // this.maskNode.getComponent(UIOpacity)!.opacity = 0;\n    }\n\n    /** 为mask添加颜色 */\n    // private async showModal(maskType: ModalType) {\n    //     await this.uiModal.showModal(maskType.opacity, maskType.easingTime, maskType.isEasing);\n    // }\n\n    /**\n     * coms 是窗体\n     * maskArr 是屏蔽层的数据\n     * @param coms \n     * @param maskArr \n     * @param isOpen \n     */\n    public checkModalWinAndPopUp(coms: UIBase[], maskArr: { [key: string]: Node }, isOpen: boolean = true) {\n        //保证永远只显示一个遮罩 显示\n        let hasShow: boolean = false;\n        console.log(\"检查屏蔽层的这招显示\");\n        console.log(coms);\n\n        console.log(maskArr);\n        for (const key in maskArr) {\n            if (Object.prototype.hasOwnProperty.call(maskArr, key)) {\n                const element = maskArr[key]\n            }\n        }\n        console.log(\"检查屏蔽层的这招显示\");\n        for (let idx = coms.length - 1; idx >= 0; idx--) {\n            let com = coms[idx];\n\n            let tcom: UIWindow | null = null;\n            if (com.formType == FormType.FormType_Win) {\n                tcom = com as UIWindow;\n            }\n            if (tcom != null) {\n                let maskKey = tcom.fid;\n                if (maskArr[maskKey]) {\n                    if (tcom.modalType.opacity >= ModalOpacity.OpacityZero && !hasShow) {\n                        maskArr[maskKey].active = true;\n\n                        if (isOpen) {\n                            maskArr[maskKey].getComponent(UIOpacity)!.opacity = 0;\n                            // maskArr[maskKey]!.opacity = 0;\n                            let opac = this.getOpacityByMask(tcom.modalType.opacity);\n                            Tween.stopAllByTarget(maskArr[maskKey]);\n                            let t = tcom.getShowEffectTime();\n\n                            // tween(maskArr[maskKey])\n                            //     .to(t, { opacity: opac }, { easing: 'linear' })\n                            //     // 当前面的动作都执行完毕后才会调用这个回调函数\n                            //     .call(() => {\n                            //         if (tcom!.modalType.clickMaskClose) {\n                            //             maskArr[maskKey].off(Node.EventType.TOUCH_START);\n                            //             maskArr[maskKey].on(Node.EventType.TOUCH_START, () => {\n                            //                 UIManager.getInstance().closeForm(tcom!.fid);\n                            //             });\n\n                            //             if (tcom.getComponent(BlockInputEvents) == null) {\n                            //                 tcom.addComponent(BlockInputEvents);\n                            //             }\n                            //         }\n                            //     })\n                            //     .start()\n                        } else {\n                            let opac = this.getOpacityByMask(tcom.modalType.opacity);\n                            maskArr[maskKey].getComponent(UITransform)!.opacity = opac;\n                            // maskArr[maskKey].opacity = opac;\n                        }\n                        hasShow = true;\n                    } else {\n                        let t = com.getHideEffectTime();\n                        // tween<UIOpacity>(maskArr[maskKey].getComponent(UIOpacity)!).to(t, { opacity: 0 }, { easing: 'linear' }).call(() => {\n                        // }).start();\n                        tween(maskArr[maskKey])\n                            .to(t, { opacity: 0 }, { easing: 'linear' })\n                            // 当前面的动作都执行完毕后才会调用这个回调函数\n                            .call(() => {\n\n                            })\n                            .start()\n                    }\n                }\n            }\n        }\n    }\n\n\n\n    //判断有多少个wins 是否需要屏蔽层\n    public checkModalWindow(coms: UIWindow[]) {\n        for (let i = coms.length - 1; i >= 0; i--) {\n            if (coms[i].modalType.opacity > 0) {\n                let uimask = coms[i].node.getChildByName(\"UIMask\")!\n                uimask.active = true;\n                // let opac = uimask.getComponent(UIOpacity)!.opacity;\n                let opac = uimask!.opacity;\n                // uimask.getComponent(UIOpacity)!.opacity = 0;\n                uimask!.opacity = 0;\n                // tween(uimask.getComponent(UIOpacity)).to(0.5, { opacity: opac }, { easing: \"linear\" }).start();\n                tween(uimask)\n                    .to(0.5, { opacity: opac }, { easing: 'linear' })\n                    // 当前面的动作都执行完毕后才会调用这个回调函数\n                    .call(() => {\n\n                    })\n                    .start()\n            } else {\n                let uimask = coms[i].node.getChildByName(\"UIMask\")!\n                if (uimask.active) {\n                    // tween(uimask.getComponent(UIOpacity)).to(0.5, { opacity: 0 }, { easing: \"linear\" }).call(() => {\n                    //     uimask.active = false;\n                    // }).start();\n                    tween(uimask)\n                        .to(0.5, { opacity: 0 }, { easing: 'linear' })\n                        // 当前面的动作都执行完毕后才会调用这个回调函数\n                        .call(() => {\n                            uimask.active = false;\n                        })\n                        .start()\n                }\n            }\n        }\n    }\n\n\n    private getOpacityByMask(maskOpacity: ModalOpacity) {\n        let tOp = 0;\n        if (maskOpacity == ModalOpacity.OpacityZero) {\n            tOp = 1;\n        } else if (maskOpacity == ModalOpacity.OpacityLow) {\n            tOp = 60;\n        } else if (maskOpacity == ModalOpacity.OpacityHalf) {\n            tOp = 125;\n        } else if (maskOpacity == ModalOpacity.OpacityHigh) {\n            tOp = 200;\n        } else if (maskOpacity == ModalOpacity.OpacityFull) {\n            tOp = 255;\n        }\n        return tOp;\n    }\n\n\n}"]}
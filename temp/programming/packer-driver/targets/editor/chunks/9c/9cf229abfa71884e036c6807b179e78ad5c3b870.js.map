{"version":3,"sources":["cce:/internal/x/prerequisite-imports"],"names":["requests","request","_err"],"mappings":";;;;;;AACA;AAEA,YAAM,CAAC,YAAY;AACf,cAAMA,QAAQ,GAAG,CAAC,uCAAD,EAAsG,uCAAtG,EAAyM,uCAAzM,EAA6S,uCAA7S,EAAsZ,uCAAtZ,EAAogB,uCAApgB,EAAknB,uCAAlnB,EAA8tB,uCAA9tB,EAA00B,uCAA10B,EAAs7B,uCAAt7B,EAAiiC,wCAAjiC,EAAkpC,wCAAlpC,EAAmwC,wCAAnwC,CAAjB;;AACA,aAAK,MAAMC,OAAX,IAAsBD,QAAtB,EAAgC;AAC5B,cAAI;AACA,kBAAMC,OAAO,EAAb;AACH,WAFD,CAEE,OAAOC,IAAP,EAAa,CACX;AACH;AACJ;AACJ,OATK,GAAN","sourcesContent":["\n// Auto generated represents the prerequisite imports of project modules.\n\nawait (async () => {\n    const requests = [() => import(\"file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Battle/reslist.ts\"), () => import(\"file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Launch/Lauch.ts\"), () => import(\"file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Lobby/reslist.ts\"), () => import(\"file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Script/Base/ResMgr.ts\"), () => import(\"file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Script/Config/SysDefine.ts\"), () => import(\"file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Script/UIFrame/ModalMgr.ts\"), () => import(\"file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Script/UIFrame/Struct.ts\"), () => import(\"file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Script/UIFrame/UIBase.ts\"), () => import(\"file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Script/UIFrame/UIFrom.ts\"), () => import(\"file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Script/UIFrame/UIMgr.ts\"), () => import(\"file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Script/Utils/PriorityQueue.ts\"), () => import(\"file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Script/Utils/PriorityStake.ts\"), () => import(\"file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Script/Utils/Utils.ts\")];\n    for (const request of requests) {\n        try {\n            await request();\n        } catch (_err) {\n            // The error should have been caught by executor.\n        }\n    }\n})();\n    "]}
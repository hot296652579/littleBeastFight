{"version":3,"sources":["file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Script/UIRoot.ts"],"names":["Component","_decorator","view","macro","ResolutionPolicy","UITransform","UILobbyMgr","SysDefine","ProjectConfig","UIManager","ccclass","property","UIRoot","minWidth","minHeight","maxWidth","maxHeight","targetDiction","ORIENTATION_PORTRAIT","rotationCallBack","getInstance","instance","start","setResizeCallback","console","log","doAdapter","onGameInit","getCurScreenDirection","doReSizeAllNode","rootNode","node","parent","ORIENTATION_LANDSCAPE","getComponent","setContentSize","DesignScreenHeight","DesignScreenWidth","getChildByName","SYS_FIXED_NODE","SYS_POPUP_NODE","SYS_FLOAT_NODE","SYS_WIN_NODE","SYS_LOADING_NODE","isLandscape","setDesignResolutionSize","FIXED_HEIGHT","FIXED_WIDTH","clearAllNodes","SYS_SCREEN_NODE","destroyAllChildren","SYS_BUBBLE_NODE","SYS_BLOCK_NODE","destory","init","Instance","showScreenLobby"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node, view, macro, ResolutionPolicy, UITransform } from \"cc\";\nimport { UILobbyMgr } from \"../Lobby/UILobbyMgr\";\nimport { SysDefine } from \"./Config/SysDefine\";\nimport { ProjectConfig } from \"./ProjectConfig\";\nimport { UIManager } from \"./UIFrame/UIMgr\";\n\nconst { ccclass, property } = _decorator\n\n\n/**\n * 应用从这里开始启动\n */\n@ccclass(\"UIRoot\")\nexport class UIRoot extends Component {\n    private static instance: UIRoot;\n\n    public static getInstance(): UIRoot {\n        return this.instance;\n    }\n\n    public async start() {\n        view.setResizeCallback(() => {\n            console.log(\"大小发生了改变=====\");\n\n            if (this.rotationCallBack != null) {\n                this.rotationCallBack();\n                this.rotationCallBack = null;\n            }\n            this.doAdapter();\n        });\n        UIRoot.instance = this;\n        this.doAdapter();\n        this.onGameInit();\n    }\n\n\n    private minWidth = 1280;\n    private minHeight = 720;\n    private maxWidth = 1600;\n    private maxHeight = 720;\n\n\n\n    //初始的屏幕朝向\n    private targetDiction: number = macro.ORIENTATION_PORTRAIT;\n\n    //获取当前屏幕的朝向\n    public getCurScreenDirection(): number {\n        return this.targetDiction\n    }\n\n\n    //转动结束的回调方法\n    private rotationCallBack: Function = null;\n\n\n    //将所有节点的大小重新定义一下\n    private doReSizeAllNode() {\n        let rootNode = this.node.parent;\n        if (this.targetDiction == macro.ORIENTATION_LANDSCAPE) {\n            //横屏\n            //Root节点\n            rootNode.getComponent(UITransform).setContentSize(ProjectConfig.DesignScreenHeight, ProjectConfig.DesignScreenWidth);\n            this.node.getChildByName(SysDefine.SYS_FIXED_NODE).getComponent(UITransform).setContentSize(ProjectConfig.DesignScreenHeight, ProjectConfig.DesignScreenWidth);\n            //UIPopup节点\n            this.node.getChildByName(SysDefine.SYS_POPUP_NODE).getComponent(UITransform).setContentSize(ProjectConfig.DesignScreenHeight, ProjectConfig.DesignScreenWidth);\n            //UIFloat节点\n            this.node.getChildByName(SysDefine.SYS_FLOAT_NODE).getComponent(UITransform).setContentSize(ProjectConfig.DesignScreenHeight, ProjectConfig.DesignScreenWidth);\n            //UIWin节点\n            this.node.getChildByName(SysDefine.SYS_WIN_NODE).getComponent(UITransform).setContentSize(ProjectConfig.DesignScreenHeight, ProjectConfig.DesignScreenWidth);\n            //UILoading节点\n            this.node.getChildByName(SysDefine.SYS_LOADING_NODE).getComponent(UITransform).setContentSize(ProjectConfig.DesignScreenHeight, ProjectConfig.DesignScreenWidth);\n        } else {\n            //Root节点\n            rootNode.getComponent(UITransform).setContentSize(ProjectConfig.DesignScreenWidth, ProjectConfig.DesignScreenHeight);\n            this.node.getChildByName(SysDefine.SYS_FIXED_NODE).getComponent(UITransform).setContentSize(ProjectConfig.DesignScreenWidth, ProjectConfig.DesignScreenHeight);\n            //UIPopup节点\n            this.node.getChildByName(SysDefine.SYS_POPUP_NODE).getComponent(UITransform).setContentSize(ProjectConfig.DesignScreenWidth, ProjectConfig.DesignScreenHeight);\n            //UIFloat节点\n            this.node.getChildByName(SysDefine.SYS_FLOAT_NODE).getComponent(UITransform).setContentSize(ProjectConfig.DesignScreenWidth, ProjectConfig.DesignScreenHeight);\n            //UIWin节点\n            this.node.getChildByName(SysDefine.SYS_WIN_NODE).getComponent(UITransform).setContentSize(ProjectConfig.DesignScreenWidth, ProjectConfig.DesignScreenHeight);\n            //UILoading节点\n            this.node.getChildByName(SysDefine.SYS_LOADING_NODE).getComponent(UITransform).setContentSize(ProjectConfig.DesignScreenWidth, ProjectConfig.DesignScreenHeight);\n\n            //UIBubble节点\n\n            //全局屏蔽层节点\n        }\n    }\n\n    /**\n     * \n     * 当前的适配策略\n     * 1：默认启动使用 竖屏 设计分辨率为 720 x 1280 \n     * 2：当进行屏幕旋转的时候执行 1280 X 720 的设计分辨率\n     * \n     * 暂时不测试 适配 的问题。\n     */\n    public doAdapter() {\n        let isLandscape = this.targetDiction == macro.ORIENTATION_LANDSCAPE;\n        if (isLandscape) {\n            console.log(\"当前为横屏xxx  固定高度\");\n            view.setDesignResolutionSize(ProjectConfig.DesignScreenHeight, ProjectConfig.DesignScreenWidth, ResolutionPolicy.FIXED_HEIGHT);\n        } else {\n            console.log(\"当前为竖屏 固定宽度\");\n            view.setDesignResolutionSize(ProjectConfig.DesignScreenWidth, ProjectConfig.DesignScreenHeight, ResolutionPolicy.FIXED_WIDTH);\n        }\n        //this.doReSizeAllNode();\n    }\n\n    clearAllNodes() {\n        this.node.getChildByName(SysDefine.SYS_SCREEN_NODE)!.destroyAllChildren();\n        this.node.getChildByName(SysDefine.SYS_FIXED_NODE)!.destroyAllChildren();\n        this.node.getChildByName(SysDefine.SYS_POPUP_NODE)!.destroyAllChildren();\n        this.node.getChildByName(SysDefine.SYS_FLOAT_NODE)!.destroyAllChildren();\n        this.node.getChildByName(SysDefine.SYS_WIN_NODE)!.destroyAllChildren();\n        this.node.getChildByName(SysDefine.SYS_BUBBLE_NODE).destroyAllChildren();\n        this.node.getChildByName(SysDefine.SYS_LOADING_NODE).destroyAllChildren();\n        this.node.getChildByName(SysDefine.SYS_BLOCK_NODE).destroyAllChildren();\n    }\n\n\n\n    public async onGameInit() {\n        //初始化UIManager中的Node。所有节点都在 UIManager中操作\n        this.clearAllNodes();\n        //先清空\n        UIManager.destory();\n        UIManager.getInstance().init(this.node.getChildByName(SysDefine.SYS_SCREEN_NODE),\n            this.node.getChildByName(SysDefine.SYS_WIN_NODE)\n        );\n\n        UILobbyMgr.Instance().showScreenLobby();\n        // let updateRes = await ResMgr.getInstance().preloadLoading(\"Core/hotupdate/UIUpdate\");\n        // let result = await ResMgr.getInstance().preloadLoading(\"Core/UILoading\");\n        // if (result && updateRes){\n        //     UIMgr.getInstance().showUILoading();\n        // }else{\n        //     console.error(\"loading节点初始化失败\");\n        // }\n\n        //UIMgr.getInstance().showLoading()\\\n        //第一步 展示 loading页面 当然有些默认就是loading页面\n\n        //第二步 初始化游戏（Manager config sdks）\n\n        //第三步 构建场景(加载必要的prefab 音频 texture)\n\n        //第四步 加载主界面ui 关掉loading 正式进入游戏\n    }\n}\n"]}
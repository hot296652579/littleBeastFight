{"version":3,"sources":["file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Script/Base/EventMgr.ts"],"names":["EventMgr","Singleton","eventDir","Map","Instance","getInstance","addEventListen","evt","fun","cxt","has","arr","get","push","set","unEventListen","index","findIndex","i","splice","emit","param","forEach","apply","clearDir","clear"],"mappings":";;;0FAQqBA,Q;;;;;;;;;;;;;;;;AAPdC,MAAAA,S;;;;;;;;;yBAOcD,Q,GAAN,MAAMA,QAAN;AAAA;AAAA,kCAAiC;AAAA;AAAA;AAAA,eAMpCE,QANoC,GAMH,IAAIC,GAAJ,EANG;AAAA;;AACzB,mBAARC,QAAQ,GAAG;AAClB;AACA,iBAAO,MAAMC,WAAN,EAAP;AACH;;AAIDC,QAAAA,cAAc,CAACC,GAAD,EAAcC,GAAd,EAA6BC,GAA7B,EAA4C;AACtD,cAAI,KAAKP,QAAL,CAAcQ,GAAd,CAAkBH,GAAlB,CAAJ,EAA4B;AACxB,kBAAMI,GAAG,GAAG,KAAKT,QAAL,CAAcU,GAAd,CAAkBL,GAAlB,CAAZ;AACAI,YAAAA,GAAG,CAACE,IAAJ,CAAS;AAAEL,cAAAA,GAAF;AAAOC,cAAAA;AAAP,aAAT;AACH,WAHD,MAGO;AACH,iBAAKP,QAAL,CAAcY,GAAd,CAAkBP,GAAlB,EAAuB,CAAC;AAAEC,cAAAA,GAAF;AAAOC,cAAAA;AAAP,aAAD,CAAvB;AACH;AACJ;;AAEDM,QAAAA,aAAa,CAACR,GAAD,EAAcC,GAAd,EAA6B;AACtC,cAAI,KAAKN,QAAL,CAAcQ,GAAd,CAAkBH,GAAlB,CAAJ,EAA4B;AACxB,kBAAMS,KAAK,GAAG,KAAKd,QAAL,CAAcU,GAAd,CAAkBL,GAAlB,EAAuBU,SAAvB,CAAiCC,CAAC,IAAIA,CAAC,CAACV,GAAF,IAASA,GAA/C,CAAd;AACAQ,YAAAA,KAAK,GAAG,CAAC,CAAT,IAAc,KAAKd,QAAL,CAAcU,GAAd,CAAkBL,GAAlB,EAAuBY,MAAvB,CAA8BH,KAA9B,EAAqC,CAArC,CAAd;AACH;AACJ;;AAEDI,QAAAA,IAAI,CAACb,GAAD,EAAc,GAAGc,KAAjB,EAAmC;AACnC,cAAI,KAAKnB,QAAL,CAAcQ,GAAd,CAAkBH,GAAlB,CAAJ,EAA4B;AACxB,iBAAKL,QAAL,CAAcU,GAAd,CAAkBL,GAAlB,EAAuBe,OAAvB,CAA+B,CAAC;AAAEd,cAAAA,GAAF;AAAOC,cAAAA;AAAP,aAAD,KAAkB;AAC7CA,cAAAA,GAAG,GAAGD,GAAG,CAACe,KAAJ,CAAUd,GAAV,EAAeY,KAAf,CAAH,GAA2Bb,GAAG,CAAC,GAAGa,KAAJ,CAAjC;AACH,aAFD;AAGH;AACJ;;AAEDG,QAAAA,QAAQ,GAAG;AACP,eAAKtB,QAAL,CAAcuB,KAAd;AACH;;AAlC2C,O","sourcesContent":["import { Component, resources, SpriteAtlas } from \"cc\";\nimport Singleton from \"./Sigleton\";\n\ninterface IItem {\n    fun: Function\n    cxt: unknown\n}\n\nexport default class EventMgr extends Singleton {\n    static get Instance() {\n        // super()\n        return super.getInstance<EventMgr>()\n    }\n\n    private eventDir: Map<string, [IItem]> = new Map()\n\n    addEventListen(evt: string, fun: Function, cxt?: unknown) {\n        if (this.eventDir.has(evt)) {\n            const arr = this.eventDir.get(evt)\n            arr.push({ fun, cxt })\n        } else {\n            this.eventDir.set(evt, [{ fun, cxt }])\n        }\n    }\n\n    unEventListen(evt: string, fun: Function) {\n        if (this.eventDir.has(evt)) {\n            const index = this.eventDir.get(evt).findIndex(i => i.fun == fun)\n            index > -1 && this.eventDir.get(evt).splice(index, 1)\n        }\n    }\n\n    emit(evt: string, ...param: unknown[]) {\n        if (this.eventDir.has(evt)) {\n            this.eventDir.get(evt).forEach(({ fun, cxt }) => {\n                cxt ? fun.apply(cxt, param) : fun(...param)\n            })\n        }\n    }\n\n    clearDir() {\n        this.eventDir.clear()\n    }\n}"]}
{"version":3,"sources":["file:///Users/super_javan/cocoscreator/littleBeastFight3.6/assets/Battle/Script/games/AIEngine.ts"],"names":["AiEngine","ActionScore","GameEngine","AiPlayer","FireKit","Config","GameEvent","OpenCardDTO","PlayerManager","MoveCardDTO","constructor","engine","_engine","id","ais","chairIds","chairColors","cards","sitDownAiLogic","sitDownVO","chair","userId","startGameAiLogic","startGameVO","aiPlayer","openAction","openResultAiLogic","openResultVO","index","card","confirmColorAiLogic","confirmColorVO","color","operationNotifyAiLogic","operationNotifyVO","myCards","forEach","v","i","actions","darkLength","length","push","row","Math","floor","col","neighbors","canMove","fromV","toV","fromC","toC","NONE","moveAction","action","sort","a","b","score","func","apply","args","moveResultAiLogic","moveResultVO","fromIndex","fromCard","toIndex","toCard","endGameAiLogic","endGameVO","console","log","use","AI_FIRE","offGroup","darkCards","runAction","open","shuffle","move","setTimeout","random","initFire","onGroup","SIT_DOWN","START_GAME","OPEN_RESULT","CONFIRM_COLOR","OPERATION_NOTIFY","MOVE_RESULT","END_GAME","DARK_CARD","createAiPlayer","inst","create","enter"],"mappings":";;;8GAmBqBA,Q,EAkPfC,W;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArQCC,MAAAA,U;;AACAC,MAAAA,Q;;AACAC,MAAAA,O;;AACAC,MAAAA,M;;AACAC,MAAAA,S;;AAEAC,MAAAA,W;;AAEAC,MAAAA,a;;AAMAC,MAAAA,W;;;;;AAEP;AACA;AACA;yBACqBT,Q,GAAN,MAAMA,QAAN,CAAe;AAC1B;AACJ;AACA;;AAEI;AACJ;AACA;;AAEI;AACJ;AACA;;AAEI;AACJ;AACA;;AAGI;AACJ;AACA;;AAGI;AACJ;AACA;AAGIU,QAAAA,WAAW,CAACC,MAAD,EAAqB;AAAA,eAxBxBC,OAwBwB;AAAA,eApBxBC,EAoBwB,GApBX,IAoBW;AAAA,eAhBxBC,GAgBwB,GAhBU,EAgBV;AAAA,eAZxBC,QAYwB,GAZgB,EAYhB;AAAA,eAPxBC,WAOwB,GAPmB,EAOnB;AAAA,eAFxBC,KAEwB;;AAAA,eAsBhCC,cAtBgC,GAsBdC,SAAD,IAA0B;AACvC,iBAAKJ,QAAL,CAAcI,SAAS,CAACC,KAAxB,IAAiCD,SAAS,CAACE,MAA3C;AAEH,WAzB+B;;AAAA,eA+BhCC,gBA/BgC,GA+BZC,WAAD,IAA8B;AAC7C,iBAAKN,KAAL,GAAaM,WAAW,CAACN,KAAzB,CAD6C,CACb;;AAChC,gBAAIO,QAAQ,GAAG,KAAKV,GAAL,CAAS,KAAKC,QAAL,CAAcQ,WAAW,CAACH,KAA1B,CAAT,CAAf;;AACA,gBAAII,QAAQ,IAAI,IAAhB,EAAsB;AAAG;AACrB,mBAAKC,UAAL,CAAgBF,WAAW,CAACH,KAA5B;AACH;AACJ,WArC+B;;AAAA,eA2ChCM,iBA3CgC,GA2CXC,YAAD,IAAgC;AAChD,iBAAKV,KAAL,CAAWU,YAAY,CAACC,KAAxB,IAAiCD,YAAY,CAACE,IAA9C;AACH,WA7C+B;;AAAA,eAmDhCC,mBAnDgC,GAmDTC,cAAD,IAAoC;AACtD,iBAAKf,WAAL,CAAiBe,cAAc,CAACX,KAAhC,IAAyCW,cAAc,CAACC,KAAxD;AACH,WArD+B;;AAAA,eA2DhCC,sBA3DgC,GA2DNC,iBAAD,IAA0C;AAC/D,gBAAId,KAAK,GAAGc,iBAAiB,CAACd,KAA9B;AACA,gBAAII,QAAQ,GAAG,KAAKV,GAAL,CAAS,KAAKC,QAAL,CAAcK,KAAd,CAAT,CAAf;;AACA,gBAAII,QAAQ,IAAI,IAAhB,EAAsB;AAAG;AACrB;AACA,kBAAIQ,KAAK,GAAG,KAAKhB,WAAL,CAAiBI,KAAjB,CAAZ;AACA,kBAAIe,OAAmC,GAAG,EAA1C;AACA,mBAAKlB,KAAL,CAAWmB,OAAX,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACzB,oBAAKD,CAAC,IAAI,CAAN,IAAYL,KAAhB,EAAuB;AAAK;AACxBG,kBAAAA,OAAO,CAACE,CAAD,CAAP,GAAaC,CAAb;AACH;AACJ,eAJD;AAKA,kBAAIC,OAA2B,GAAG,EAAlC,CATkB,CASsB;;AACxC,kBAAI,KAAKC,UAAL,GAAkBC,MAAlB,GAA2B,CAA/B,EAAkC;AAAE;AAChCF,gBAAAA,OAAO,CAACG,IAAR,CAAa,IAAIzC,WAAJ,CAAgB,GAAhB,EAAqB,KAAKwB,UAA1B,EAAsCL,KAAtC,CAAb;AACH;;AACD,mBAAK,IAAIS,IAAT,IAAiBM,OAAjB,EAA0B;AACtB,oBAAIP,KAAK,GAAGO,OAAO,CAACN,IAAD,CAAnB,CADsB,CACM;;AAC5B,oBAAIc,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWjB,KAAK,GAAG,CAAnB,CAAV;AACA,oBAAIkB,GAAG,GAAGlB,KAAK,GAAG,CAAlB;AACA,oBAAImB,SAAS,GAAG,EAAhB;;AACA,oBAAIJ,GAAG,GAAG,CAAV,EAAa;AAAE;AACXI,kBAAAA,SAAS,CAACL,IAAV,CAAgB,CAACC,GAAG,GAAG,CAAP,IAAY,CAAb,GAAkBG,GAAjC,EADS,CAC+B;AAC3C;;AACD,oBAAIH,GAAG,GAAG,CAAV,EAAa;AACTI,kBAAAA,SAAS,CAACL,IAAV,CAAgB,CAACC,GAAG,GAAG,CAAP,IAAY,CAAb,GAAkBG,GAAjC,EADS,CAC+B;AAC3C;;AACD,oBAAIA,GAAG,GAAG,CAAV,EAAa;AACTC,kBAAAA,SAAS,CAACL,IAAV,CAAgBC,GAAG,GAAG,CAAP,GAAYG,GAAZ,GAAkB,CAAjC,EADS,CAC8B;AAC1C;;AACD,oBAAIA,GAAG,GAAG,CAAV,EAAa;AACTC,kBAAAA,SAAS,CAACL,IAAV,CAAgBC,GAAG,GAAG,CAAP,GAAYG,GAAZ,GAAkB,CAAjC,EADS,CAC8B;AAC1C;;AACDC,gBAAAA,SAAS,CAACX,OAAV,CAAmBC,CAAD,IAAO;AACrB,sBAAI,KAAKzB,OAAL,CAAaoC,OAAb,CAAqBpB,KAArB,EAA4BS,CAA5B,EAA+B,KAAKpB,KAApC,CAAJ,EAAgD;AAAI;AAChD,wBAAIgC,KAAK,GAAG,KAAKhC,KAAL,CAAWW,KAAX,IAAoB,IAAhC;AACA,wBAAIsB,GAAG,GAAG,KAAKjC,KAAL,CAAWoB,CAAX,IAAgB,IAA1B;AACA,wBAAIc,KAAK,GAAG,KAAKlC,KAAL,CAAWW,KAAX,KAAqB,CAAjC;AACA,wBAAIwB,GAAG,GAAG,KAAKnC,KAAL,CAAWoB,CAAX,KAAiB,CAA3B;;AACA,wBAAIe,GAAG,IAAI;AAAA;AAAA,kDAAWC,IAAtB,EAA4B;AACxBd,sBAAAA,OAAO,CAACG,IAAR,CAAa,IAAIzC,WAAJ,CAAgB,EAAhB,EAAoB,KAAKqD,UAAzB,EAAqClC,KAArC,EAA4CQ,KAA5C,EAAmDS,CAAnD,CAAb;AACH,qBAFD,MAEO;AACH,0BAAIY,KAAK,IAAI,CAAT,IAAcC,GAAG,IAAI,CAAzB,EAA4B;AACxBX,wBAAAA,OAAO,CAACG,IAAR,CAAa,IAAIzC,WAAJ,CAAgB,CAAhB,EAAmB,KAAKqD,UAAxB,EAAoClC,KAApC,EAA2CQ,KAA3C,EAAkDS,CAAlD,CAAb;AACH,uBAFD,MAEO,IAAIY,KAAK,IAAI,CAAT,IAAcC,GAAG,IAAI,CAAzB,EAA4B;AAC/BX,wBAAAA,OAAO,CAACG,IAAR,CAAa,IAAIzC,WAAJ,CAAgB,GAAhB,EAAqB,KAAKqD,UAA1B,EAAsClC,KAAtC,EAA6CQ,KAA7C,EAAoDS,CAApD,CAAb;AACH,uBAFM,MAEA;AACH,4BAAIY,KAAK,GAAGC,GAAR,GAAc,CAAlB,EAAqB;AAAG;AACpBX,0BAAAA,OAAO,CAACG,IAAR,CAAa,IAAIzC,WAAJ,CAAgB,KAAKiD,GAAL,GAAWD,KAAX,GAAmBC,GAAnC,EAAwC,KAAKI,UAA7C,EAAyDlC,KAAzD,EAAgEQ,KAAhE,EAAuES,CAAvE,CAAb;AACH,yBAFD,MAEO;AAAgB;AACnBE,0BAAAA,OAAO,CAACG,IAAR,CAAa,IAAIzC,WAAJ,CAAgB,KAAKgD,KAArB,EAA4B,KAAKK,UAAjC,EAA6ClC,KAA7C,EAAoDQ,KAApD,EAA2DS,CAA3D,CAAb;AACH;AACJ;AACJ;AACJ;AACJ,iBAtBD;AAuBH;;AACD,kBAAIkB,MAAM,GAAGhB,OAAO,CAACiB,IAAR,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChC,uBAAOD,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAnB;AACH,eAFY,EAEV,CAFU,CAAb,CAtDkB,CAyDlB;AACA;AACA;;AACAJ,cAAAA,MAAM,CAACK,IAAP,CAAYC,KAAZ,CAAkB,IAAlB,EAAwBN,MAAM,CAACO,IAA/B;AACH;AACJ,WA5H+B;;AAAA,eAkIhCC,iBAlIgC,GAkIXC,YAAD,IAAgC;AAChD,iBAAK/C,KAAL,CAAW+C,YAAY,CAACC,SAAxB,IAAqCD,YAAY,CAACE,QAAlD;AACA,iBAAKjD,KAAL,CAAW+C,YAAY,CAACG,OAAxB,IAAmCH,YAAY,CAACI,MAAhD;AACH,WArI+B;;AAAA,eA2IhCC,cA3IgC,GA2IdC,SAAD,IAA0B;AACvCC,YAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACA;AAAA;AAAA,oCAAQC,GAAR,CAAY;AAAA;AAAA,kCAAOC,OAAnB,EAA4BC,QAA5B,CAAqC,IAArC;AACH,WA9I+B;;AAAA,eAoJhClD,UApJgC,GAoJlBL,KAAD,IAAW;AACpB,gBAAIwD,SAAS,GAAG,KAAKpC,UAAL,EAAhB,CADoB,CAC2B;;AAC/C,gBAAIoC,SAAS,CAACnC,MAAV,GAAmB,CAAvB,EAA0B;AACtB,mBAAKoC,SAAL,CAAe,MAAM;AACjB;AACA,qBAAKjE,OAAL,CAAakE,IAAb,CAAkB;AAAA;AAAA,gDAAgB1D,KAAhB,EAAuB,KAAK2D,OAAL,CAAaH,SAAb,EAAwB,CAAxB,CAAvB,CAAlB;AAEH,eAJD;AAKH;AACJ,WA7J+B;;AAAA,eAwLhCtB,UAxLgC,GAwLnB,CAAClC,KAAD,EAAQ6C,SAAR,EAAmBE,OAAnB,KAA+B;AACxC,iBAAKU,SAAL,CAAe,MAAM;AACjB,mBAAKjE,OAAL,CAAaoE,IAAb,CAAkB;AAAA;AAAA,8CAAgB5D,KAAhB,EAAuB6C,SAAvB,EAAkCE,OAAlC,CAAlB,EADiB,CAC+C;;AACnE,aAFD;AAGH,WA5L+B;;AAAA,eAkMhCU,SAlMgC,GAkMnBtB,MAAD,IAAY;AACpB0B,YAAAA,UAAU,CAAC,MAAM;AACb1B,cAAAA,MAAM;AACT,aAFS,EAEPX,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACsC,MAAL,KAAgB,GAAhB,GAAsB,GAAjC,CAFO,CAAV;AAGH,WAtM+B;;AAC5B,eAAKtE,OAAL,GAAeD,MAAf;AACA,eAAKwE,QAAL;AACH;AAED;AACJ;AACA;;;AACYA,QAAAA,QAAQ,GAAG;AACf;AAAA;AAAA,kCAAQV,GAAR,CAAY;AAAA;AAAA,gCAAOC,OAAnB,EAA4BU,OAA5B,CAAoC;AAAA;AAAA,sCAAUC,QAA9C,EAAwD,KAAKnE,cAA7D,EAA6E,IAA7E;AACA;AAAA;AAAA,kCAAQuD,GAAR,CAAY;AAAA;AAAA,gCAAOC,OAAnB,EAA4BU,OAA5B,CAAoC;AAAA;AAAA,sCAAUE,UAA9C,EAA0D,KAAKhE,gBAA/D,EAAiF,IAAjF;AACA;AAAA;AAAA,kCAAQmD,GAAR,CAAY;AAAA;AAAA,gCAAOC,OAAnB,EAA4BU,OAA5B,CAAoC;AAAA;AAAA,sCAAUG,WAA9C,EAA2D,KAAK7D,iBAAhE,EAAmF,IAAnF;AACA;AAAA;AAAA,kCAAQ+C,GAAR,CAAY;AAAA;AAAA,gCAAOC,OAAnB,EAA4BU,OAA5B,CAAoC;AAAA;AAAA,sCAAUI,aAA9C,EAA6D,KAAK1D,mBAAlE,EAAuF,IAAvF;AACA;AAAA;AAAA,kCAAQ2C,GAAR,CAAY;AAAA;AAAA,gCAAOC,OAAnB,EAA4BU,OAA5B,CAAoC;AAAA;AAAA,sCAAUK,gBAA9C,EAAgE,KAAKxD,sBAArE,EAA6F,IAA7F;AACA;AAAA;AAAA,kCAAQwC,GAAR,CAAY;AAAA;AAAA,gCAAOC,OAAnB,EAA4BU,OAA5B,CAAoC;AAAA;AAAA,sCAAUM,WAA9C,EAA2D,KAAK3B,iBAAhE,EAAmF,IAAnF;AACA;AAAA;AAAA,kCAAQU,GAAR,CAAY;AAAA;AAAA,gCAAOC,OAAnB,EAA4BU,OAA5B,CAAoC;AAAA;AAAA,sCAAUO,QAA9C,EAAwD,KAAKtB,cAA7D,EAA6E,IAA7E;AACH;AAED;AACJ;AACA;AACA;;;AAyIYU,QAAAA,OAAO,CAACH,SAAD,EAAsB;AACjCA,UAAAA,SAAS,CAACpB,IAAV,CAAe,YAAY;AACvB,mBAAOZ,IAAI,CAACsC,MAAL,KAAgB,GAAvB;AACH,WAFD;AAGA,iBAAO,KAAKjE,KAAZ;AACH;AAED;AACJ;AACA;;;AACIuB,QAAAA,UAAU,GAAa;AACnB,cAAIoC,SAAS,GAAG,EAAhB,CADmB,CACa;;AAChC,eAAK3D,KAAL,CAAWmB,OAAX,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACzB,gBAAID,CAAC,IAAI;AAAA;AAAA,0CAAWuD,SAApB,EAA+B;AAC3BhB,cAAAA,SAAS,CAAClC,IAAV,CAAeJ,CAAf;AACH;AACJ,WAJD;AAKA,iBAAOsC,SAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AAiBI;AACJ;AACA;AACIiB,QAAAA,cAAc,GAAG;AACb,cAAIrE,QAAQ,GAAG;AAAA;AAAA,8CAAcsE,IAAd,GAAqBC,MAArB,CAA4B;AAAA;AAAA,oCAAa,KAAKlF,EAAL,EAAb,EAAwB,QAAQ,KAAKA,EAArC,CAA5B,CAAf;AACA,eAAKC,GAAL,CAASU,QAAQ,CAACH,MAAlB,IAAsCG,QAAtC;;AACA,eAAKZ,OAAL,CAAaoF,KAAb,CAAmBxE,QAAnB;AACH;;AA3OyB,O;AA+O9B;AACA;AACA;;;AACMvB,MAAAA,W,GAAN,MAAMA,WAAN,CAAkB;AACd;AACJ;AACA;;AAEI;AACJ;AACA;;AAEI;AACJ;AACA;AAIIS,QAAAA,WAAW,CAACiD,KAAD,EAAgBC,IAAhB,EAAgC,GAAGE,IAAnC,EAAgD;AAAA,eAX3DH,KAW2D;AAAA,eAP3DC,IAO2D;AAAA,eAH3DE,IAG2D,GAH7C,EAG6C;AACvD,eAAKH,KAAL,GAAaA,KAAb;AACA,eAAKC,IAAL,GAAYA,IAAZ;AACA,eAAKE,IAAL,GAAYA,IAAZ;AACH;;AAnBa,O","sourcesContent":["import GameEngine from \"./GameEngine\";\nimport AiPlayer from \"./AiPlayer\";\nimport FireKit from \"./fire/FireKit\";\nimport Config from \"./Config\";\nimport GameEvent from \"./GameEvent\";\nimport StartGameVO from \"./vo/StartGameVO\";\nimport OpenCardDTO from \"./dto/OpenCardDTO\";\nimport SitDownVO from \"./vo/SitDownVO\";\nimport PlayerManager from \"./PlayerManager\";\nimport OpenResultVO from \"./vo/OpenResultVO\";\nimport OperationNotifyVO from \"./vo/OperationNotifyVO\";\nimport MoveResultVO from \"./vo/MoveResultVO\";\nimport EndGameVO from \"./vo/EndGameVO\";\nimport ConfirmColorVO from \"./vo/ConfirmColorVO\";\nimport MoveCardDTO from \"./dto/MoveCardDTO\";\n\n/**\n * AI 引擎\n */\nexport default class AiEngine {\n    /**\n     * 游戏引擎\n     */\n    private _engine: GameEngine;\n    /**\n     * AI的起始ID\n     */\n    private id: number = 2001;\n    /**\n     * AI玩家列表\n     */\n    private ais: { [id: number]: AiPlayer } = {};\n    /**\n     * Chair -> ID\n     */\n    private chairIds: { [chair: number]: number } = {};\n\n    /**\n     * Chair -> Color\n     */\n    private chairColors: { [chair: number]: number } = {};\n\n    /**\n     * 当前的牌\n     */\n    private cards: number[];\n\n    constructor(engine: GameEngine) {\n        this._engine = engine;\n        this.initFire();\n    }\n\n    /**\n     * 初始化事件订阅\n     */\n    private initFire() {\n        FireKit.use(Config.AI_FIRE).onGroup(GameEvent.SIT_DOWN, this.sitDownAiLogic, this);\n        FireKit.use(Config.AI_FIRE).onGroup(GameEvent.START_GAME, this.startGameAiLogic, this);\n        FireKit.use(Config.AI_FIRE).onGroup(GameEvent.OPEN_RESULT, this.openResultAiLogic, this);\n        FireKit.use(Config.AI_FIRE).onGroup(GameEvent.CONFIRM_COLOR, this.confirmColorAiLogic, this);\n        FireKit.use(Config.AI_FIRE).onGroup(GameEvent.OPERATION_NOTIFY, this.operationNotifyAiLogic, this);\n        FireKit.use(Config.AI_FIRE).onGroup(GameEvent.MOVE_RESULT, this.moveResultAiLogic, this);\n        FireKit.use(Config.AI_FIRE).onGroup(GameEvent.END_GAME, this.endGameAiLogic, this);\n    }\n\n    /**\n     * 坐下\n     * @param sitDownVO\n     */\n    sitDownAiLogic = (sitDownVO: SitDownVO) => {\n        this.chairIds[sitDownVO.chair] = sitDownVO.userId;\n\n    };\n\n    /**\n     * 开始游戏的Ai处理逻辑\n     * @param startGameVO\n     */\n    startGameAiLogic = (startGameVO: StartGameVO) => {\n        this.cards = startGameVO.cards; //初始化牌\n        let aiPlayer = this.ais[this.chairIds[startGameVO.chair]];\n        if (aiPlayer != null) {  //如果当前操作玩家是机器人\n            this.openAction(startGameVO.chair);\n        }\n    };\n\n    /**\n     * 翻开牌结果通知的AI逻辑\n     * @param openResultVO\n     */\n    openResultAiLogic = (openResultVO: OpenResultVO) => {\n        this.cards[openResultVO.index] = openResultVO.card;\n    };\n\n    /**\n     * 确认颜色逻辑\n     * @param confirmColorVO\n     */\n    confirmColorAiLogic = (confirmColorVO: ConfirmColorVO) => {\n        this.chairColors[confirmColorVO.chair] = confirmColorVO.color;\n    };\n\n    /**\n     * 操作通知的AI逻辑\n     * @param operationNotifyVO\n     */\n    operationNotifyAiLogic = (operationNotifyVO: OperationNotifyVO) => {\n        let chair = operationNotifyVO.chair;\n        let aiPlayer = this.ais[this.chairIds[chair]];\n        if (aiPlayer != null) {  //如果当前操作玩家是机器人\n            // 获取自己的花色\n            let color = this.chairColors[chair];\n            let myCards: { [card: number]: number } = [];\n            this.cards.forEach((v, i) => {\n                if ((v >> 4) == color) {    // 自己的牌\n                    myCards[v] = i;\n                }\n            });\n            let actions: Array<ActionScore> = [];   // 所有运行的动作\n            if (this.darkLength().length > 0) { // 操作列表\n                actions.push(new ActionScore(100, this.openAction, chair));\n            }\n            for (let card in myCards) {\n                let index = myCards[card];  //索引\n                let row = Math.floor(index / 4);\n                let col = index % 4;\n                let neighbors = [];\n                if (row < 3) { // 获取邻居的下标\n                    neighbors.push(((row + 1) * 4) + col);  // 下\n                }\n                if (row > 0) {\n                    neighbors.push(((row - 1) * 4) + col);  // 上\n                }\n                if (col < 3) {\n                    neighbors.push((row * 4) + col + 1);   // 右\n                }\n                if (col > 0) {\n                    neighbors.push((row * 4) + col - 1);   // 左\n                }\n                neighbors.forEach((v) => {\n                    if (this._engine.canMove(index, v, this.cards)) {   //如果能够移动\n                        let fromV = this.cards[index] & 0x0F;\n                        let toV = this.cards[v] & 0x0F;\n                        let fromC = this.cards[index] >> 4;\n                        let toC = this.cards[v] >> 4;\n                        if (toC == GameEngine.NONE) {\n                            actions.push(new ActionScore(90, this.moveAction, chair, index, v));\n                        } else {\n                            if (fromV == 7 && toV == 0) {\n                                actions.push(new ActionScore(0, this.moveAction, chair, index, v));\n                            } else if (fromV == 0 && toV == 7) {\n                                actions.push(new ActionScore(200, this.moveAction, chair, index, v));\n                            } else {\n                                if (fromV - toV > 0) {  // 能吃\n                                    actions.push(new ActionScore(99 + toV + fromV - toV, this.moveAction, chair, index, v));\n                                } else {               // 不能吃\n                                    actions.push(new ActionScore(99 - fromV, this.moveAction, chair, index, v));\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n            let action = actions.sort((a, b) => {\n                return a.score - b.score\n            })[0]\n            // let action = _.sortBy(actions, (a) => { // 按照分数排序\n            //     return 0 - a.score;\n            // })[0];\n            action.func.apply(this, action.args);\n        }\n    };\n\n    /**\n     * 移动结果AI逻辑\n     * @param moveResultVO\n     */\n    moveResultAiLogic = (moveResultVO: MoveResultVO) => {\n        this.cards[moveResultVO.fromIndex] = moveResultVO.fromCard;\n        this.cards[moveResultVO.toIndex] = moveResultVO.toCard;\n    };\n\n    /**\n     * 结束游戏逻辑\n     * @param endGameVO\n     */\n    endGameAiLogic = (endGameVO: EndGameVO) => {\n        console.log(\"==========AI GAME END==========\");\n        FireKit.use(Config.AI_FIRE).offGroup(this);\n    };\n\n    /**\n     * 随机打开牌操作\n     * @param chair\n     */\n    openAction = (chair) => {\n        let darkCards = this.darkLength();             // 获取未打开的牌下标\n        if (darkCards.length > 0) {\n            this.runAction(() => {\n                // this._engine.open(new OpenCardDTO(chair, _.shuffle(darkCards)[0])); //随机打开一张牌\n                this._engine.open(new OpenCardDTO(chair, this.shuffle(darkCards)[0]))\n\n            });\n        }\n    };\n    private shuffle(darkCards): number[] {\n        darkCards.sort(function () {\n            return Math.random() - 0.5\n        })\n        return this.cards;\n    }\n\n    /**\n     * 获取未打开的牌\n     */\n    darkLength(): number[] {\n        let darkCards = [];             // 获取未打开的牌下标\n        this.cards.forEach((v, i) => {\n            if (v == GameEngine.DARK_CARD) {\n                darkCards.push(i);\n            }\n        });\n        return darkCards;\n    }\n\n    /**\n     * 移动操作\n     * @param chair\n     * @param fromIndex\n     * @param toIndex\n     */\n    moveAction = (chair, fromIndex, toIndex) => {\n        this.runAction(() => {\n            this._engine.move(new MoveCardDTO(chair, fromIndex, toIndex));  //移动操作\n        });\n    };\n\n    /**\n     * 执行动作\n     * @param action\n     */\n    runAction = (action) => {\n        setTimeout(() => {\n            action()\n        }, Math.floor(Math.random() * 200 + 300));\n    };\n\n    /**\n     * 创建个AI玩家\n     */\n    createAiPlayer() {\n        let aiPlayer = PlayerManager.inst().create(new AiPlayer(this.id++, \"Ai-\" + this.id));\n        this.ais[aiPlayer.userId] = <AiPlayer>aiPlayer;\n        this._engine.enter(aiPlayer);\n    }\n\n}\n\n/**\n * 操作评分\n */\nclass ActionScore {\n    /**\n     * 分数\n     */\n    score: number;\n    /**\n     * 函数\n     */\n    func: Function;\n    /**\n     * 参数\n     */\n    args: any[] = [];\n\n\n    constructor(score: number, func: Function, ...args: any[]) {\n        this.score = score;\n        this.func = func;\n        this.args = args;\n    }\n}\n"]}